{
  "library/beforeunload.spec.ts > should be able to navigate away from page with beforeunload": {
    "previous": "failed",
    "current": "passed"
  },
  "library/beforeunload.spec.ts > should not stall on evaluate when dismissing beforeunload": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should isolate session cookies": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set multiple cookies": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set a cookie on a different domain": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-base-url.spec.ts > should construct a new URL when a baseURL in browser.newContext is passed to page.goto @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-basic.spec.ts > should not report frameless pages on error": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-cookies-third-party.spec.ts > same origin third party 'Partitioned;' cookie with different origin intermediate iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-device.spec.ts > device > should scroll to click": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-device.spec.ts > device > should scroll to a precise position with mobile scale": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-fetch.spec.ts > should support cookie with empty value": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should produce extracted zip": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > should round-trip extracted har.zip": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-locale.spec.ts > should work for multiple pages sharing same process": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-page-event.spec.ts > should work with Shift-clicking": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-page-event.spec.ts > should work with Ctrl-clicking": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-proxy.spec.ts > should use proxy": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-proxy.spec.ts > should send secure cookies to subdomain.localhost": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-proxy.spec.ts > should use proxy twice": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-proxy.spec.ts > should use socks proxy in second page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-reuse.spec.ts > reuse launch > should reset serviceworker": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-reuse.spec.ts > reuse launch > should reset serviceworker that hangs in importScripts": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-reuse.spec.ts > reuse launch > should continue issuing events after closing the reused page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-reuse.spec.ts > reuse connect > should re-add binding after reset": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-reuse.spec.ts > reuse connect > should reset serviceworker that hangs in importScripts": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-viewport.spec.ts > should set window.screen.orientation.type for mobile devices": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsertype-connect.spec.ts > run-server > should be able to visit ipv6 through localhost": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsertype-connect.spec.ts > run-server > socks proxy > should proxy ipv6 localhost requests @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > should respect CSP @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > navigator.clipboard should be present": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > window.GestureEvent in WebKit": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > requestFullscreen": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/oopif.spec.ts > should expose function": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > contentFrame should work": {
    "previous": "passed",
    "current": "failed"
  },
  "library/emulation-focus.spec.ts > should change document.activeElement": {
    "previous": "passed",
    "current": "failed"
  },
  "library/emulation-focus.spec.ts > should change focused iframe": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should include response": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should filter by regexp": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should return receive time": {
    "previous": "failed",
    "current": "passed"
  },
  "library/headful.spec.ts > should(not) block third party cookies": {
    "previous": "passed",
    "current": "failed"
  },
  "library/headful.spec.ts > should not block third party SameSite=None cookies": {
    "previous": "failed",
    "current": "passed"
  },
  "library/headful.spec.ts > should not override viewport size when passed null": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should click when element detaches in mousedown": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should not block programmatic events": {
    "previous": "passed",
    "current": "failed"
  },
  "library/hit-target.spec.ts > should work with mui select": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should work with block inside inline": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should work with block-block-block inside inline-inline": {
    "previous": "passed",
    "current": "failed"
  },
  "library/ignorehttpserrors.spec.ts > should work with mixed content": {
    "previous": "failed",
    "current": "passed"
  },
  "library/multiclient.spec.ts > should connect two clients": {
    "previous": "failed",
    "current": "passed"
  },
  "library/popup.spec.ts > BrowserContext.addInitScript should apply to a cross-process popup": {
    "previous": "failed",
    "current": "passed"
  },
  "library/proxy.spec.ts > should use proxy for second page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should proxy local network requests > by default > loopback address": {
    "previous": "failed",
    "current": "passed"
  },
  "library/proxy.spec.ts > should proxy local network requests > by default > link-local": {
    "previous": "passed",
    "current": "failed"
  },
  "library/resource-timing.spec.ts > should work for subresource": {
    "previous": "passed",
    "current": "failed"
  },
  "library/role-utils.spec.ts > wpt accname #0": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > wpt accname #2": {
    "previous": "passed",
    "current": "failed"
  },
  "library/role-utils.spec.ts > axe-core implicit-role": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > axe-core accessible-text": {
    "previous": "passed",
    "current": "failed"
  },
  "library/route-web-socket.spec.ts > should not throw with empty handler": {
    "previous": "passed",
    "current": "failed"
  },
  "library/route-web-socket.spec.ts > no-mock > should work with binaryType=blob": {
    "previous": "failed",
    "current": "passed"
  },
  "library/route-web-socket.spec.ts > no-mock > should work when connection errors out": {
    "previous": "passed",
    "current": "failed"
  },
  "library/route-web-socket.spec.ts > no-mock > should work with error after successful open": {
    "previous": "failed",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open snapshot in new browser context": {
    "previous": "passed",
    "current": "failed"
  },
  "library/tracing.spec.ts > should ignore iframes in head": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-click.spec.ts > should work for Shadow DOM v1": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-click.spec.ts > should double click the button": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-convenience.spec.ts > should have a nice preview for non-ascii attributes/children": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-convenience.spec.ts > inputValue should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-misc.spec.ts > should hover": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for document": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-screenshot.spec.ts > element screenshot > should work when main world busts JSON.stringify": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-screenshot.spec.ts > element screenshot > should prefer type over extension": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-evaluate.spec.ts > should be isolated between frames": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-frame-element.spec.ts > should work @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-frame-element.spec.ts > should work with contentFrame": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-goto.spec.ts > should navigate subframes @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-goto.spec.ts > should reject when frame detaches": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-hierarchy.spec.ts > should detach child frames on navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-convenience.spec.ts > should have a nice preview": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-convenience.spec.ts > inputValue should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-convenience.spec.ts > innerHTML should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-convenience.spec.ts > textContent should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-misc-1.spec.ts > should select single option": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-init-script.spec.ts > should work after a cross origin navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should throw when handler times out": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should work with noWaitAfter": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should removeLocatorHandler": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-script-tag.spec.ts > should work with a path": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-style-tag.spec.ts > should include sourceURL when path is provided": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-style-tag.spec.ts > should throw when added with content to the CSP page": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-aria-snapshot-ai.spec.ts > should auto-wait for navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-basic.spec.ts > should await cross-process navigation when clicking anchor": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-basic.spec.ts > should await form-get on click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-basic.spec.ts > should work with goto following click": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-no-hang.spec.ts > clicking in the middle of navigation that aborts": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-no-hang.spec.ts > goBack in the middle of navigation that commits": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-basic.spec.ts > page.url should include hashes": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click-timeout-3.spec.ts > should timeout waiting for hit target": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click-timeout-3.spec.ts > should report wrong hit target subtree": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click the button after a cross origin navigation ": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should waitFor display:none to be gone": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should waitFor visible when parent is hidden": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should scroll and click the button": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should scroll and click the button with smooth scroll behavior": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click a rotated button": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should fire contextmenu event on right click": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click the button inside an iframe": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click the button with em border with offset": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click a very large button with offset": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click a button in scrolling container with offset": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should wait for becoming hit target": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > trial run should work with short timeout": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch click event properties": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch click after navigation ": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch click after a cross origin navigation ": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch drag drop events": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch wheel event": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch device orientation event": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should throw if argument is from different frame": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-evaluate.spec.ts > should work right after a cross-origin navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-evaluate.spec.ts > should work with CSP": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-console.spec.ts > should not throw when there are console messages in detached iframes": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-load.spec.ts > should fire once with iframe navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-network.spec.ts > Page.Events.Response @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-popup.spec.ts > should work with noopener and url": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-popup.spec.ts > should work with clicking target=_blank": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-request.spec.ts > should fire for iframes": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-request.spec.ts > should fire for fetches with keepalive: true": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-request.spec.ts > should finish 204 request": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should fill textarea @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - time": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - range": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should retry on readonly element": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should be able to clear using fill()": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should work with cross-process that fails before committing": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should work with Cross-Origin-Opener-Policy": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should fail when replaced by another navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should work with self requesting page": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should be able to navigate to a page controlled by service worker": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should return from goto if new navigation is started": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > goBack/goForward should work with bfcache-able pages": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-history.spec.ts > page.reload during renderer-initiated navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-history.spec.ts > page.reload should work with cross-origin redirect": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > page.goForward during renderer-initiated navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-history.spec.ts > regression test for issue 20791": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > should reload proper page": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should send a character with ElementHandle.press": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should report multiple modifiers": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should be able to prevent selectAll": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should work with keyboard events with empty.html": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-mouse.spec.ts > should select the text with mouse": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-mouse.spec.ts > should trigger hover state": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-navigation.spec.ts > should work with _blank target": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-network-idle.spec.ts > should wait for networkidle in setContent from the child frame": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-idle.spec.ts > should wait for networkidle from the child frame": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-network-request.spec.ts > should report raw response headers in redirects": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-response.spec.ts > should return body": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-route.spec.ts > should work with redirects for subresources": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should stop animations that happen right before screenshot": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should resume infinite animations": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-set-input-files.spec.ts > should throw when uploading a folder in a normal file upload input": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-set-input-files.spec.ts > should upload large file with relative path": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-set-input-files.spec.ts > should upload the file with spaces in name": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-function.spec.ts > should survive cross-process navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should throw for bad state": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-load-state.spec.ts > should resolve immediately if load state matches": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should resolve after popup load": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-load-state.spec.ts > should work for frame": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-response.spec.ts > should work with async predicate": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > should throw on waitFor": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > should report logs while waiting for visible": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-1.spec.ts > should report logs while waiting for hidden": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > should work when node is added through innerHTML": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-url.spec.ts > should work with commit": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-url.spec.ts > should work with clicking on anchor links": {
    "previous": "failed",
    "current": "passed"
  },
  "page/queryselector.spec.ts > should return empty array if nothing is found": {
    "previous": "passed",
    "current": "failed"
  },
  "page/selectors-css.spec.ts > should work with comma separated list": {
    "previous": "failed",
    "current": "passed"
  },
  "page/selectors-css.spec.ts > should work with :not": {
    "previous": "passed",
    "current": "failed"
  },
  "page/selectors-misc.spec.ts > should work for open shadow roots": {
    "previous": "failed",
    "current": "passed"
  }
}