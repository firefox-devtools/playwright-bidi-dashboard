{
  "library/beforeunload.spec.ts > should be able to navigate away from page with beforeunload": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-add-cookies.spec.ts > should isolate send cookie header": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set a cookie with a path": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set a cookie on a different domain": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-base-url.spec.ts > should construct a new URL when a baseURL in browser.newPage is passed to page.goto": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-basic.spec.ts > window.open should use parent tab context": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-basic.spec.ts > should isolate localStorage and cookies @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-basic.spec.ts > should not report frameless pages on error": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-cookies.spec.ts > should properly report \"Strict\" sameSite cookie": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-fetch.spec.ts > should preserve cookie order from Set-Cookie header": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > should ignore boundary when matching multipart/form-data body": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should update har.zip for page with different options": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-locale.spec.ts > should work for multiple pages sharing same process": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-page-event.spec.ts > should work with Shift-clicking": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-pages.spec.ts > should return bounding box with page scale": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-proxy.spec.ts > should use socks proxy in second page": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-reuse.spec.ts > reuse connect > should reset serviceworker that hangs in importScripts": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-viewport-mobile.spec.ts > mobile viewport > should scroll when emulating a mobile viewport": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > should play audio @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > serviceWorker should intercept document request": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > loading in HTMLImageElement.prototype": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > requestFullscreen": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > service worker should cover the iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > service worker should register in an iframe": {
    "previous": "passed",
    "current": "failed"
  },
  "library/channels.spec.ts > should not generate dispatchers for subresources w/o listeners": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/chromium.spec.ts > should emit console messages from service worker": {
    "previous": "timedOut"
  },
  "library/chromium/chromium.spec.ts > should emit different console types from service worker": {
    "previous": "timedOut"
  },
  "library/chromium/chromium.spec.ts > should capture console.log from ServiceWorker start": {
    "previous": "timedOut"
  },
  "library/chromium/oopif.spec.ts > should expose function": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/oopif.spec.ts > should be able to click in iframe": {
    "previous": "passed",
    "current": "failed"
  },
  "library/debug-controller.spec.ts > should reset routes before reuse": {
    "previous": "failed",
    "current": "passed"
  },
  "library/emulation-focus.spec.ts > should change document.activeElement": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should include response": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should omit content": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should filter by regexp": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should calculate time": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should not hang on resources served from cache": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should not hang on slow chunked response": {
    "previous": "failed",
    "current": "passed"
  },
  "library/headful.spec.ts > should not block third party SameSite=None cookies": {
    "previous": "passed",
    "current": "failed"
  },
  "library/hit-target.spec.ts > should work with mui select": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should work with block-block-block inside inline-inline": {
    "previous": "passed",
    "current": "failed"
  },
  "library/hit-target.spec.ts > should work with block inside inline in shadow dom": {
    "previous": "failed",
    "current": "passed"
  },
  "library/multiclient.spec.ts > should connect two clients": {
    "previous": "passed",
    "current": "failed"
  },
  "library/multiclient.spec.ts > should unroute websockets": {
    "previous": "failed",
    "current": "passed"
  },
  "library/page-close.spec.ts > should not treat navigations as new popups": {
    "previous": "failed",
    "current": "passed"
  },
  "library/popup.spec.ts > BrowserContext.addInitScript should apply to an in-process popup": {
    "previous": "failed",
    "current": "passed"
  },
  "library/popup.spec.ts > should expose function from browser context": {
    "previous": "passed",
    "current": "failed"
  },
  "library/popup.spec.ts > should not dispatch binding on a closed page": {
    "previous": "failed",
    "current": "passed"
  },
  "library/popup.spec.ts > should not throttle rAF in the opener page": {
    "previous": "timedOut",
    "current": "failed"
  },
  "library/proxy.spec.ts > should use proxy @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should use proxy for second page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should use socks proxy": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should use socks proxy in second page": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > wpt accname #3": {
    "previous": "failed",
    "current": "passed"
  },
  "library/signals.spec.ts > signals > should close the browser on SIGHUP": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/trace-viewer.spec.ts > should show params and return value": {
    "previous": "failed",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show null as a param": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should have correct snapshot size": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should have correct stack trace": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should have network requests": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should filter network requests by resource type": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show font preview": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should filter network requests by url": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should have network request overrides": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should have network request overrides 2": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show snapshot URL": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should popup snapshot": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should capture iframe with sandbox attribute": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should capture data-url svg iframe": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should contain adopted style sheets": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should work with adopted style sheets and replace/replaceSync": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should work with adopted style sheets and all: unset": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should work with nesting CSS selectors": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should restore scroll positions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should restore control values": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should work with meta CSP": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should handle multiple headers": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should handle src=blob": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should preserve currentSrc": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should register custom elements": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should highlight target elements": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should highlight target element in shadow dom": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should highlight expect failure": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show action source": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should follow redirects": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should include metainfo": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open two trace files": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open two trace files of the same test (v6)": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not crash with broken locator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should serve overridden request": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should display waitForLoadState even if did not wait for it": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should display language-specific locators": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should pick locator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should update highlight when typing locator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should update highlight when typing snapshot": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open trace-1.31": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open trace-1.37": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should prefer later resource request with the same method": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should ignore 304 responses": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should pick locator in iframe": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should highlight locator in iframe while typing": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should preserve noscript when javascript is disabled": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should remove noscript by default": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should remove noscript when javaScriptEnabled is set to true": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open snapshot in new browser context": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should show similar actions from legacy library-only trace": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show correct request start time": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not record route actions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not record network actions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show baseURL in metadata pane": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not leak recorders": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > canvas disabled title": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > canvas clipping": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "library/trace-viewer.spec.ts > canvas clipping in iframe": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "library/trace-viewer.spec.ts > should show only one pointer with multilevel iframes": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show a popover": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show a modal dialog": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open settings dialog": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should toggle theme color": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should toggle canvas rendering": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should render blob trace received from message": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > shouldn't render not-blob trace received from message": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not trip over complex urls in style tags": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should render locator descriptions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should load trace from HTTP with progress indicator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should filter actions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should survive service worker restart": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts >  > should handle failed snapshots due to dialog": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/tracing.spec.ts > should respect tracesDir and name": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-click.spec.ts > should work with Node removed": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-click.spec.ts > should double click the button": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-convenience.spec.ts > should have a nice preview for non-ascii attributes/children": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-convenience.spec.ts > innerText should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-misc.spec.ts > should hover when Node is removed": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-misc.spec.ts > should focus a button": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for cross-process iframes": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for cross-frame evaluations": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for detached elements": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-screenshot.spec.ts > element screenshot > should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-select-text.spec.ts > should select plain div": {
    "previous": "passed",
    "current": "failed"
  },
  "page/eval-on-selector.spec.ts > should support spaces with >> syntax": {
    "previous": "failed",
    "current": "passed"
  },
  "page/expect-boolean.spec.ts > toBeVisible > over navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/expect-boolean.spec.ts > toBeAttached > over navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-evaluate.spec.ts > should have different execution contexts": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-evaluate.spec.ts > should not allow cross-frame js handles": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-frame-element.spec.ts > should work @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-frame-element.spec.ts > should work with frameset": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-goto.spec.ts > should continue after client redirect": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-convenience.spec.ts > innerHTML should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-misc-1.spec.ts > should hover when Node is removed": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-misc-1.spec.ts > should clear input": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-misc-1.spec.ts > should focus and blur a button": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-misc-1.spec.ts > should dispatch click event via ElementHandles": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-query.spec.ts > should enforce same frame for has/leftOf/rightOf/above/below/near": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should work with locator.hover()": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should throw when handler times out": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should work with noWaitAfter": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should removeLocatorHandler": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-style-tag.spec.ts > should work with content": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-aria-snapshot-ai.spec.ts > should stitch all frame snapshots": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-aria-snapshot.spec.ts > should include pseudo codepoints": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-basic.spec.ts > should await cross-process navigation when clicking anchor": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-no-hang.spec.ts > clicking on links which do not commit navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-no-hang.spec.ts > opening a popup": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-basic.spec.ts > page.url should include hashes": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click-during-navigation.spec.ts > should not fail with internal error upon navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click the button @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should issue clicks in parallel in page and popup": {
    "previous": "failed",
    "current": "timedOut"
  },
  "page/page-click.spec.ts > should click offscreen buttons": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should waitFor visible when already visible": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should waitFor visible when parent is hidden": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click wrapped links": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click on checkbox label and toggle": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should scroll and click the button with smooth scroll behavior": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should fire contextmenu event on right click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click a button in scrolling container with offset": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should wait for becoming hit target with trial run": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > trial run should not double click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should update modifiers correctly": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should fail when element detaches after animation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should retry when element detaches after animation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should not throw protocol error when navigating during the click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch drag drop events": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch absolute device orientation event": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-drag.spec.ts > Drag and drop > should be able to drag the mouse in a frame": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-evaluate.spec.ts > should work with new Function() and CSP": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-evaluate.spec.ts > should work with busted Array.prototype.map/push": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-network.spec.ts > Page.Events.Request @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-network.spec.ts > should fire events in proper order": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-request.spec.ts > should fire for fetches with keepalive: true": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-expose-function.spec.ts > should work on frames": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-filechooser.spec.ts > should not throw when frame is detached immediately": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - date": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - time": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should fill contenteditable with new lines": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should retry on disabled element": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should work when page calls history API in beforeunload": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should fail when replaced by another navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should work when navigating to 404": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should be able to navigate to a page controlled by service worker": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should return url with basic auth info": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-history.spec.ts > page.goBack should work @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-history.spec.ts > page.goForward during renderer-initiated navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > regression test for issue 20791": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-history.spec.ts > should reload proper page": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should move with the arrow keys": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should press plus": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should handle selectAll": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should scroll with PageDown": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should dispatch insertText after context menu was opened": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-idle.spec.ts > should wait for networkidle in setContent": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-idle.spec.ts > should wait for networkidle in setContent with request from previous navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-network-idle.spec.ts > should wait for networkidle in setContent from the child frame": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-response.spec.ts > should return text": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-network-response.spec.ts > should bypass disk cache when page interception is enabled": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-network-response.spec.ts > should bypass disk cache when context interception is enabled": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-network-sizes.spec.ts > should have correct responseBodySize for 404 with content": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot > should take fullPage screenshots during navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should not capture pseudo element css animation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should resume infinite animations": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should not capture infinite web animations": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should capture screenshots after layoutchanges in transitionend event": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-set-input-files.spec.ts > should throw if a directory and files are passed": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-set-input-files.spec.ts > should throw when uploading a file in a directory upload input": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-set-input-files.spec.ts > should upload a file after popup": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-function.spec.ts > should not be called after finishing successfully": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should pick up ongoing navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-load-state.spec.ts > should work with clicking target=_blank": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-navigation.spec.ts > should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-navigation.spec.ts > should work for cross-process navigations": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-navigation.spec.ts > should work on frame": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-request.spec.ts > should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-response.spec.ts > should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-1.spec.ts > should immediately resolve promise if node exists": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-url.spec.ts > should work with clicking on anchor links": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-url.spec.ts > should work with DOM history.back()/history.forward()": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-url.spec.ts > should work with url match for same document navigations": {
    "previous": "failed",
    "current": "passed"
  },
  "page/queryselector.spec.ts > should return empty array if nothing is found": {
    "previous": "failed",
    "current": "passed"
  },
  "page/selectors-misc.spec.ts > should click on links in shadow dom": {
    "previous": "failed",
    "current": "passed"
  },
  "page/selectors-misc.spec.ts > should work with internal:has=": {
    "previous": "passed",
    "current": "failed"
  }
}