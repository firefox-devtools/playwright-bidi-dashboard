{
  "library/beforeunload.spec.ts": {
    "skipped": [
      "should run beforeunload if asked for @smoke",
      "should access page after beforeunload"
    ]
  },
  "library/browsercontext-cookies.spec.ts": {
    "skipped": [
      "should support requestStorageAccess"
    ]
  },
  "library/browsercontext-events.spec.ts": {
    "skipped": [
      "console event should work in popup 2",
      "console event should work in immediately closed popup",
      "dialog event should work in popup",
      "dialog event should work in immediately closed popup",
      "dialog event should work with inline script tag",
      "weberror event should work"
    ]
  },
  "library/browsercontext-locale.spec.ts": {
    "skipped": [
      "should format number in workers"
    ]
  },
  "library/browsercontext-network-event.spec.ts": {
    "skipped": [
      "should not fire events for favicon or favicon redirects"
    ]
  },
  "library/browsercontext-proxy.spec.ts": {
    "skipped": [
      "should use proxy for https urls",
      "link-local",
      "link-local"
    ]
  },
  "library/browsercontext-service-worker-policy.spec.ts": {
    "skipped": [
      "blocks service worker registration"
    ]
  },
  "library/browsercontext-user-agent.spec.ts": {
    "skipped": [
      "custom user agent for download"
    ]
  },
  "library/browsercontext-viewport-mobile.spec.ts": {
    "skipped": [
      "should fire orientationchange event"
    ]
  },
  "library/browsercontext-viewport.spec.ts": {
    "skipped": [
      "WebKit Windows headed should have a minimal viewport"
    ]
  },
  "library/browsertype-basic.spec.ts": {
    "skipped": [
      "should throw when trying to connect with not-chromium"
    ]
  },
  "library/browsertype-connect.spec.ts": {
    "skipped": [
      "should connect over wss",
      "should be able to reconnect to a browser",
      "should be able to visit ipv6",
      "should ignore page.pause when headed",
      "should be able to visit ipv6 through localhost",
      "should be able to connect two browsers at the same time",
      "should support slowmo option",
      "disconnected event should be emitted when browser is closed or server is closed",
      "disconnected event should have browser as argument",
      "should handle exceptions during connect",
      "should set the browser connected state",
      "should throw when used after isConnected returns false",
      "should throw when calling waitForNavigation after disconnect",
      "should reject navigation when browser closes",
      "should reject waitForSelector when browser closes",
      "should emit close events on pages and contexts",
      "should terminate network waiters",
      "should reject waitForEvent before browser.close finishes",
      "should reject waitForEvent before browser.onDisconnect fires",
      "should respect selectors",
      "should not throw on close after disconnect",
      "should saveAs videos from remote browser",
      "should be able to connect 20 times to a single server without warnings",
      "should save download",
      "should error when saving download after deletion",
      "should properly disconnect when connection closes from the client side",
      "should be able to connect when the wsEndpoint is passed as an option",
      "should save har",
      "should filter launch options",
      "should record trace with sources",
      "should fulfill with global fetch result",
      "should upload large file",
      "setInputFiles should preserve lastModified timestamp",
      "should connect over http",
      "should forward non-forwarded requests",
      "should proxy localhost requests @smoke",
      "should proxy ipv6 localhost requests @smoke",
      "should proxy requests from fetch api",
      "should proxy requests from fetch api over ipv6",
      "should proxy local.playwright requests",
      "should lead to the error page for forwarded requests when the connection is refused",
      "should proxy based on the pattern",
      "should check proxy pattern on the client",
      "should work with cluster",
      "should properly disconnect when connection closes from the server side",
      "should be able to reconnect to a browser 12 times without warnings"
    ]
  },
  "library/browsertype-launch-selenium.spec.ts": {
    "skipped": [
      "selenium grid 3.141.59 standalone chromium",
      "selenium grid 3.141.59 hub + node chromium",
      "selenium grid 4.8.3 standalone chromium",
      "selenium grid 4.8.3 hub + node chromium",
      "selenium grid 4.8.3 standalone chromium broken driver",
      "selenium grid 3.141.59 standalone non-chromium",
      "selenium grid 3.141.59 standalone chromium through run-driver"
    ]
  },
  "library/capabilities.spec.ts": {
    "skipped": [
      "webkit should define window.safari"
    ]
  },
  "library/channels.spec.ts": {
    "skipped": [
      "should work with the domain module"
    ]
  },
  "library/chromium/chromium.spec.ts": {
    "skipped": [
      "should create a worker from a service worker",
      "should create a worker from service worker with noop routing",
      "should emit new service worker on update",
      "serviceWorkers() should return current workers",
      "should close service worker together with the context",
      "should throw when connecting twice to an already running persistent context (--remote-debugging-port)",
      "should throw when connecting twice to an already running persistent context (--remote-debugging-pipe)",
      "httpCredentials",
      "serviceWorker(), and fromServiceWorker() work",
      "should intercept service worker requests (main and within)",
      "should report failure (due to content-type) of main service worker request",
      "should report failure (due to redirect) of main service worker request",
      "should intercept service worker importScripts",
      "should report intercepted service worker requests in HAR",
      "should intercept only serviceworker request, not page",
      "should intercept service worker update requests",
      "setOffline",
      "setExtraHTTPHeaders"
    ]
  },
  "library/chromium/connect-over-cdp.spec.ts": {
    "skipped": [
      "should send extra headers with connect request",
      "should send default User-Agent header with connect request",
      "emulate media should not be affected by second connectOverCDP"
    ]
  },
  "library/chromium/extensions.spec.ts": {
    "skipped": [
      "should give access to the service worker",
      "should give access to the service worker when recording video",
      "should support request/response events in the service worker",
      "should report console messages from content script"
    ]
  },
  "library/chromium/oopif.spec.ts": {
    "failing": [
      "should take screenshot"
    ],
    "skipped": [
      "should get the proper viewport",
      "should emit filechooser event for iframe"
    ]
  },
  "library/defaultbrowsercontext-2.spec.ts": {
    "skipped": [
      "should handle exception"
    ]
  },
  "library/download.spec.ts": {
    "skipped": [
      "should be able to download a PDF file",
      "should be able to download a inline PDF file via navigation",
      "should save to user-specified path",
      "should download even if there is no \"attachment\" value",
      "should convert navigation to a resource with unsupported mime type into download",
      "should download links with data url",
      "should download successfully when routing",
      "should report download when navigation turns into download @smoke",
      "should work with Cross-Origin-Opener-Policy",
      "should report downloads with acceptDownloads: false",
      "should report downloads with acceptDownloads: true",
      "should report proper download url when download is from download attribute",
      "should report downloads for download attribute",
      "should save to user-specified path without updating original path",
      "should save to two different paths with multiple saveAs calls",
      "should save to overwritten filepath",
      "should create subdirectories when saving to non-existent user-specified path",
      "should error when saving with downloads disabled",
      "should error when saving after deletion",
      "should report non-navigation downloads",
      "should report download path within page.on('download', …) handler for Files",
      "should report download path within page.on('download', …) handler for Blobs",
      "should report alt-click downloads",
      "should report new window downloads",
      "should delete file",
      "should expose stream",
      "should delete downloads on context destruction",
      "should delete downloads on browser gone",
      "should close the context without awaiting the download",
      "should throw if browser dies",
      "should download large binary.zip",
      "should be able to cancel pending downloads",
      "should not fail explicitly to cancel a download even if that is already finished",
      "should emit download event from nested iframes"
    ]
  },
  "library/downloads-path.spec.ts": {
    "skipped": [
      "should keep downloadsPath folder",
      "should delete downloads when context closes",
      "should report downloads in downloadsPath folder",
      "should report downloads in downloadsPath folder with a relative path"
    ]
  },
  "library/emulation-focus.spec.ts": {
    "failing": [
      "should not affect screenshots"
    ]
  },
  "library/favicon.spec.ts": {
    "skipped": [
      "should load svg favicon with prefer-color-scheme"
    ]
  },
  "library/geolocation.spec.ts": {
    "skipped": [
      "should work @smoke",
      "should isolate contexts",
      "should use context options",
      "watchPosition should be notified",
      "should use context options for popup"
    ]
  },
  "library/har.spec.ts": {
    "skipped": [
      "should filter favicon and favicon redirects"
    ]
  },
  "library/headful.spec.ts": {
    "skipped": [
      "should close browsercontext with pending beforeunload dialog",
      "should click background tab"
    ]
  },
  "library/ignorehttpserrors.spec.ts": {
    "skipped": [
      "serviceWorker should intercept document request"
    ]
  },
  "library/modernizr.spec.ts": {
    "skipped": [
      "Safari Desktop",
      "Mobile Safari"
    ]
  },
  "library/multiclient.spec.ts": {
    "skipped": [
      "should chain routes with changed url"
    ]
  },
  "library/page-clock.frozen.spec.ts": {
    "skipped": [
      "clock should be frozen",
      "clock should be realtime"
    ]
  },
  "library/page-event-crash.spec.ts": {
    "skipped": [
      "should emit crash event when page crashes",
      "should throw on any action after page crashes",
      "should cancel waitForEvent when page crashes",
      "should cancel navigation when page crashes",
      "should be able to close context when page crashes"
    ]
  },
  "library/popup.spec.ts": {
    "skipped": [
      "should use viewport size from window features"
    ]
  },
  "library/proxy.spec.ts": {
    "skipped": [
      "should use proxy with emulated user agent"
    ]
  },
  "library/screenshot.spec.ts": {
    "failing": [
      "should run in parallel in multiple pages",
      "should work with a mobile viewport",
      "should work with a mobile viewport and clip",
      "should work with a mobile viewport and fullPage",
      "should work with device scale factor",
      "should work with device scale factor and clip",
      "should work with device scale factor and scale:css",
      "should work with device scale factor, clip and scale:css",
      "element screenshot should work with a mobile viewport",
      "element screenshot should work with device scale factor",
      "should capture full element when larger than viewport with device scale factor",
      "should capture full element when larger than viewport with device scale factor and scale:css",
      "page screenshot should capture css transform with device pixels"
    ],
    "skipped": [
      "should work if the main resource hangs"
    ]
  },
  "library/shared-worker.spec.ts": {
    "skipped": [
      "should survive shared worker restart"
    ]
  },
  "library/slowmo.spec.ts": {
    "skipped": [
      "Page SlowMo reload",
      "Page SlowMo setInputFiles",
      "Frame SlowMo setInputFiles"
    ]
  },
  "library/trace-viewer.spec.ts": {
    "skipped": [
      "should work with adopted style sheets and all: unset",
      "should serve css without content-type"
    ]
  },
  "library/tracing.spec.ts": {
    "skipped": [
      "should collect trace with resources, but no js"
    ]
  },
  "library/unroute-behavior.spec.ts": {
    "skipped": [
      "context.unroute should not wait for pending handlers to complete",
      "context.unrouteAll should wait for pending handlers to complete",
      "context.unrouteAll should not wait for pending handlers to complete if behavior is ignoreErrors"
    ]
  },
  "library/video.spec.ts": {
    "skipped": [
      "should expose video path",
      "should expose video path blank page",
      "should work with weird screen resolution",
      "should work with relative path for recordVideo.dir",
      "should expose video path blank popup",
      "should not create video for internal pages"
    ]
  },
  "library/web-socket.spec.ts": {
    "skipped": [
      "should emit close events",
      "should emit frame events",
      "should filter out the close events when the server closes with a message",
      "should pass self as argument to close event",
      "should emit binary frame events",
      "should emit error",
      "should not have stray error events",
      "should reject waitForEvent on socket close",
      "should reject waitForEvent on page close",
      "should turn off when offline"
    ]
  },
  "page/expect-matcher-result.spec.ts": {
    "failing": [
      "toHaveScreenshot should populate matcherResult"
    ]
  },
  "page/frame-evaluate.spec.ts": {
    "skipped": [
      "should work in iframes that failed initial navigation",
      "should work in iframes that interrupted initial javascript url navigation"
    ]
  },
  "page/frame-hierarchy.spec.ts": {
    "skipped": [
      "should send \"framenavigated\" when navigating on anchor URLs",
      "should refuse to display x-frame-options:deny iframe"
    ]
  },
  "page/interception.spec.ts": {
    "skipped": [
      "should intercept blob url requests"
    ]
  },
  "page/locator-is-visible.spec.ts": {
    "skipped": [
      "isVisible during navigation should not throw"
    ]
  },
  "page/locator-misc-1.spec.ts": {
    "skipped": [
      "should upload the file"
    ]
  },
  "page/locator-misc-2.spec.ts": {
    "failing": [
      "should take screenshot"
    ]
  },
  "page/network-post-data.spec.ts": {
    "failing": [
      "should get post data for file/blob",
      "should get post data for navigator.sendBeacon api calls"
    ]
  },
  "page/page-add-locator-handler.spec.ts": {
    "failing": [
      "should work with toHaveScreenshot"
    ]
  },
  "page/page-click-scroll.spec.ts": {
    "skipped": [
      "should scroll into view display:contents with position"
    ]
  },
  "page/page-click.spec.ts": {
    "skipped": [
      "should click the button with fixed position inside an iframe",
      "should click in a transformed iframe",
      "should click in a nested transformed iframe",
      "should fire contextmenu event on right click in correct order"
    ]
  },
  "page/page-dialog.spec.ts": {
    "skipped": [
      "should handle multiple alerts",
      "should handle multiple confirms"
    ]
  },
  "page/page-drag.spec.ts": {
    "skipped": [
      "should drag into an iframe",
      "should drag out of an iframe"
    ]
  },
  "page/page-event-console.spec.ts": {
    "skipped": [
      "should trigger correct Log"
    ]
  },
  "page/page-event-network.spec.ts": {
    "skipped": [
      "should resolve responses after a navigation"
    ]
  },
  "page/page-event-pageerror.spec.ts": {
    "skipped": [
      "should fire",
      "should not receive console message for pageError",
      "should contain sourceURL",
      "should contain the Error.name property",
      "should support an empty Error.name property",
      "should handle odd values",
      "should handle object",
      "should handle window",
      "should emit error from unhandled rejects"
    ]
  },
  "page/page-event-popup.spec.ts": {
    "skipped": [
      "should be able to capture alert"
    ]
  },
  "page/page-event-request.spec.ts": {
    "skipped": [
      "should finish 204 request"
    ]
  },
  "page/page-expose-function.spec.ts": {
    "skipped": [
      "should be callable from-inside addInitScript",
      "exposeBinding(handle) should work with element handles"
    ]
  },
  "page/page-focus.spec.ts": {
    "skipped": [
      "should traverse only form elements"
    ]
  },
  "page/page-goto.spec.ts": {
    "failing": [
      "should report raw buffer for main resource"
    ],
    "skipped": [
      "should work with anchor navigation"
    ]
  },
  "page/page-history.spec.ts": {
    "skipped": [
      "page.reload should work with data url",
      "page.goBack during renderer-initiated navigation"
    ]
  },
  "page/page-keyboard.spec.ts": {
    "skipped": [
      "should send proper codes while typing with shift",
      "should support MacOS shortcuts",
      "should expose keyIdentifier in webkit",
      "should move to the start of the document"
    ]
  },
  "page/page-network-response.spec.ts": {
    "failing": [
      "should return set-cookie header after route.fulfill"
    ]
  },
  "page/page-network-sizes.spec.ts": {
    "skipped": [
      "should have correct responseBodySize for 404 with content",
      "should return sizes without hanging"
    ]
  },
  "page/page-request-fulfill.spec.ts": {
    "failing": [
      "should allow mocking binary responses",
      "should allow mocking svg with charset",
      "headerValue should return set-cookie from intercepted response"
    ]
  },
  "page/page-request-intercept.spec.ts": {
    "skipped": [
      "should intercept multipart/form-data request body"
    ]
  },
  "page/page-route.spec.ts": {
    "skipped": [
      "should not fulfill with redirect status"
    ]
  },
  "page/page-set-extra-http-headers.spec.ts": {
    "failing": [
      "should not duplicate referer header"
    ]
  },
  "page/page-set-input-files.spec.ts": {
    "skipped": [
      "should work @smoke",
      "should set from memory",
      "should work with CSP",
      "input event.composed should be true and cross shadow dom boundary",
      "input should trigger events when files changed second time",
      "should preserve lastModified timestamp"
    ]
  },
  "page/page-wait-for-url.spec.ts": {
    "skipped": [
      "should work with commit and about:blank"
    ]
  },
  "page/retarget.spec.ts": {
    "skipped": [
      "setInputFiles should work with label"
    ]
  },
  "page/selectors-react.spec.ts": {
    "skipped": [
      "should work with multi-root elements (fragments)",
      "should work with react memo",
      "should work with react memo"
    ]
  },
  "page/selectors-vue.spec.ts": {
    "skipped": [
      "should work with multi-root elements (fragments)"
    ]
  },
  "page/workers.spec.ts": {
    "skipped": [
      "Page.workers @smoke",
      "should emit created and destroyed events",
      "should report console logs",
      "should not report console logs from workers twice",
      "should have JSHandles for console logs",
      "should evaluate",
      "should report errors",
      "should clear upon navigation",
      "should clear upon cross-process navigation",
      "should attribute network activity for worker inside iframe to the iframe",
      "should report network activity",
      "should report network activity on worker creation",
      "should report worker script as network request after redirect",
      "should dispatch console messages when page has workers",
      "should support extra http headers",
      "should support offline"
    ]
  }
}