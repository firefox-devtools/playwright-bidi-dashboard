{
  "library/beforeunload.spec.ts": {
    "failing": [
      "should close browsercontext with beforeunload page",
      "should close page with beforeunload listener",
      "should not stall on click when dismissing beforeunload",
      "should support closing the page after a previous dismiss"
    ],
    "skipped": [
      "should run beforeunload if asked for @smoke",
      "should access page after beforeunload"
    ]
  },
  "library/browser.spec.ts": {
    "failing": [
      "version should work"
    ]
  },
  "library/browsercontext-add-cookies.spec.ts": {
    "failing": [
      "should set cookies with SameSite attribute and no secure attribute",
      "should roundtrip cookie",
      "should isolate session cookies",
      "should isolate persistent cookies",
      "should isolate send cookie header",
      "should set cookie with reasonable defaults",
      "should set a cookie on a different domain"
    ]
  },
  "library/browsercontext-add-init-script.spec.ts": {
    "failing": [
      "should work with browser context scripts with a path"
    ]
  },
  "library/browsercontext-base-url.spec.ts": {
    "failing": [
      "should construct a new URL when a baseURL in browserType.launchPersistentContext is passed to page.goto",
      "should construct the URLs correctly when a baseURL with a trailing slash in browser.newPage is passed to page.goto"
    ]
  },
  "library/browsercontext-basic.spec.ts": {
    "failing": [
      "window.open should use parent tab context",
      "should propagate default viewport to the page",
      "should make a copy of default viewport",
      "should respect deviceScaleFactor",
      "should not report frameless pages on error",
      "should disable javascript",
      "should work with offline option",
      "fetch with keepalive should throw when offline",
      "should emulate navigator.onLine",
      "should emulate offline event",
      "should emulate media in popup",
      "should emulate media in cross-process iframe"
    ]
  },
  "library/browsercontext-clearcookies.spec.ts": {
    "failing": [
      "should remove cookies by name",
      "should remove cookies by name regex",
      "should remove cookies by domain",
      "should remove cookies by path",
      "should remove cookies by name and domain"
    ]
  },
  "library/browsercontext-cookies-third-party.spec.ts": {
    "failing": [
      "third party non-partitioned cookies",
      "save/load third party non-partitioned cookies",
      "third party 'Partitioned;' cookies",
      "save/load third party 'Partitioned;' cookies",
      "add 'Partitioned;' cookie via API",
      "same origin third party 'Partitioned;' cookie with different origin intermediate iframe",
      "top level 'Partitioned;' cookie and same origin iframe",
      "should(not) block third party cookies - persistent context"
    ]
  },
  "library/browsercontext-cookies.spec.ts": {
    "failing": [
      "should get a cookie @smoke",
      "should get a non-session cookie",
      "should get multiple cookies",
      "should parse cookie with large Max-Age correctly",
      "iframe should inherit cookies from parent"
    ],
    "skipped": [
      "should support requestStorageAccess"
    ]
  },
  "library/browsercontext-credentials.spec.ts": {
    "failing": [
      "should work with setHTTPCredentials",
      "should work with correct credentials @smoke",
      "should return resource body",
      "should work with correct credentials and matching origin",
      "should work with correct credentials and matching origin case insensitive",
      "should fail with correct credentials and mismatching scheme",
      "should fail with correct credentials and mismatching hostname",
      "should fail with correct credentials and mismatching port"
    ]
  },
  "library/browsercontext-csp.spec.ts": {
    "failing": [
      "should bypass CSP meta tag @smoke",
      "should bypass CSP header",
      "should bypass after cross-process navigation",
      "should bypass CSP in iframes as well"
    ]
  },
  "library/browsercontext-device.spec.ts": {
    "failing": [
      "should work @smoke",
      "should support clicking",
      "should scroll twice when emulated",
      "should reset scroll top after a navigation",
      "should scroll to a precise position with mobile scale",
      "should emulate viewport and screen size",
      "should emulate viewport without screen size"
    ]
  },
  "library/browsercontext-dsf.spec.ts": {
    "failing": [
      "should fetch hidpi assets"
    ]
  },
  "library/browsercontext-events.spec.ts": {
    "failing": [
      "console event should work with element handles",
      "dialog event should work in popup 2"
    ],
    "skipped": [
      "console event should work in popup 2",
      "console event should work in immediately closed popup",
      "dialog event should work in popup",
      "dialog event should work in immediately closed popup",
      "dialog event should work with inline script tag",
      "weberror event should work"
    ]
  },
  "library/browsercontext-fetch.spec.ts": {
    "failing": [
      "should work with connectOverCDP"
    ]
  },
  "library/browsercontext-har.spec.ts": {
    "failing": [
      "should change document URL after redirected navigation",
      "should goBack to redirected navigation",
      "should goForward to redirected navigation",
      "should reload redirected navigation",
      "should round-trip har with postData",
      "should record overridden requests to har",
      "should update har.zip for context",
      "should update har.zip for page",
      "should update extracted har.zip for page",
      "context.unrouteAll should stop context.routeFromHAR"
    ]
  },
  "library/browsercontext-locale.spec.ts": {
    "failing": [
      "should affect accept-language header @smoke",
      "should affect navigator.language",
      "should affect navigator.language in popups",
      "should work for multiple pages sharing same process"
    ],
    "skipped": [
      "should format number in workers"
    ]
  },
  "library/browsercontext-network-event.spec.ts": {
    "failing": [
      "BrowserContext.Events.Request",
      "BrowserContext.Events.Response",
      "should reject response.finished if context closes"
    ],
    "skipped": [
      "should not fire events for favicon or favicon redirects"
    ]
  },
  "library/browsercontext-page-event.spec.ts": {
    "failing": [
      "should have url",
      "should have about:blank url with domcontentloaded",
      "should have about:blank for empty url with domcontentloaded",
      "should report when a new page is created and closed",
      "should have an opener"
    ]
  },
  "library/browsercontext-pages.spec.ts": {
    "failing": [
      "should click the button with deviceScaleFactor set",
      "should not leak listeners during navigation of 20 pages"
    ]
  },
  "library/browsercontext-proxy.spec.ts": {
    "failing": [
      "should authenticate",
      "should authenticate with empty password",
      "should isolate proxy credentials between contexts",
      "should use socks proxy",
      "should use socks proxy in second page",
      "should isolate proxy credentials between contexts on navigation",
      "localhost",
      "loopback address"
    ],
    "skipped": [
      "should use proxy for https urls",
      "link-local",
      "link-local"
    ]
  },
  "library/browsercontext-reuse.spec.ts": {
    "failing": [
      "should re-add binding after reset",
      "should reset serviceworker",
      "should reset serviceworker that hangs in importScripts",
      "should not cache resources",
      "should ignore binding from beforeunload",
      "should reset mouse position",
      "should reset tracing",
      "should work with clock emulation",
      "should continue issuing events after closing the reused page",
      "should work with routeWebSocket",
      "should update viewport and media",
      "should re-add binding after reset",
      "should reset serviceworker",
      "should reset serviceworker that hangs in importScripts",
      "should not cache resources",
      "should ignore binding from beforeunload",
      "should reset mouse position",
      "should reset tracing",
      "should work with clock emulation",
      "should continue issuing events after closing the reused page",
      "should work with routeWebSocket",
      "should update viewport and media"
    ]
  },
  "library/browsercontext-route.spec.ts": {
    "failing": [
      "should support Set-Cookie header",
      "should use Set-Cookie header in future requests"
    ]
  },
  "library/browsercontext-service-worker-policy.spec.ts": {
    "skipped": [
      "blocks service worker registration"
    ]
  },
  "library/browsercontext-set-extra-http-headers.spec.ts": {
    "failing": [
      "should override extra headers from browser context"
    ]
  },
  "library/browsercontext-storage-state.spec.ts": {
    "failing": [
      "should round-trip through the file",
      "should capture cookies"
    ]
  },
  "library/browsercontext-user-agent.spec.ts": {
    "failing": [
      "should work",
      "should work for subframes",
      "should emulate device user-agent",
      "should make a copy of default options",
      "should work for navigator.userAgentData and sec-ch-ua headers"
    ],
    "skipped": [
      "custom user agent for download"
    ]
  },
  "library/browsercontext-viewport-mobile.spec.ts": {
    "failing": [
      "should support mobile emulation",
      "should support touch emulation",
      "should be detectable",
      "should support landscape emulation",
      "should support window.orientation emulation",
      "default mobile viewports to 980 width",
      "respect meta viewport tag",
      "should emulate the hover media feature",
      "should scroll when emulating a mobile viewport",
      "should scroll mobile page with background-attachment: fixed"
    ],
    "skipped": [
      "should fire orientationchange event"
    ]
  },
  "library/browsercontext-viewport.spec.ts": {
    "failing": [
      "should get the proper default viewport size",
      "should set the proper viewport size",
      "should return correct outerWidth and outerHeight",
      "should emulate device width",
      "should emulate device height",
      "should emulate availWidth and availHeight",
      "should support touch with null viewport",
      "should set both screen and viewport options",
      "should set window.screen.orientation.type for mobile devices"
    ],
    "skipped": [
      "WebKit Windows headed should have a minimal viewport"
    ]
  },
  "library/browsertype-basic.spec.ts": {
    "skipped": [
      "browserType.executablePath should work",
      "should throw when trying to connect with not-chromium"
    ]
  },
  "library/browsertype-connect.spec.ts": {
    "failing": [
      "should saveAs videos from remote browser",
      "should save download",
      "should error when saving download after deletion",
      "should lead to the error page for forwarded requests when the connection is refused"
    ],
    "skipped": [
      "should connect over wss",
      "should be able to reconnect to a browser",
      "should be able to visit ipv6",
      "should ignore page.pause when headed",
      "should be able to visit ipv6 through localhost",
      "should be able to connect two browsers at the same time",
      "should support slowmo option",
      "disconnected event should be emitted when browser is closed or server is closed",
      "disconnected event should have browser as argument",
      "should handle exceptions during connect",
      "should set the browser connected state",
      "should throw when used after isConnected returns false",
      "should throw when calling waitForNavigation after disconnect",
      "should reject navigation when browser closes",
      "should reject waitForSelector when browser closes",
      "should emit close events on pages and contexts",
      "should terminate network waiters",
      "should reject waitForEvent before browser.close finishes",
      "should reject waitForEvent before browser.onDisconnect fires",
      "should respect selectors",
      "should not throw on close after disconnect",
      "should saveAs videos from remote browser",
      "should be able to connect 20 times to a single server without warnings",
      "should save download",
      "should error when saving download after deletion",
      "should properly disconnect when connection closes from the client side",
      "should be able to connect when the wsEndpoint is passed as an option",
      "should save har",
      "should filter launch options",
      "should record trace with sources",
      "should fulfill with global fetch result",
      "should upload large file",
      "setInputFiles should preserve lastModified timestamp",
      "should connect over http",
      "should forward non-forwarded requests",
      "should proxy localhost requests @smoke",
      "should proxy ipv6 localhost requests @smoke",
      "should proxy requests from fetch api",
      "should proxy requests from fetch api over ipv6",
      "should proxy local.playwright requests",
      "should lead to the error page for forwarded requests when the connection is refused",
      "should proxy based on the pattern",
      "should check proxy pattern on the client",
      "should work with cluster",
      "should properly disconnect when connection closes from the server side",
      "should be able to reconnect to a browser 12 times without warnings"
    ]
  },
  "library/browsertype-launch-selenium.spec.ts": {
    "skipped": [
      "selenium grid 3.141.59 standalone chromium",
      "selenium grid 3.141.59 hub + node chromium",
      "selenium grid 4.8.3 standalone chromium",
      "selenium grid 4.8.3 hub + node chromium",
      "selenium grid 4.8.3 standalone chromium broken driver",
      "selenium grid 3.141.59 standalone non-chromium",
      "selenium grid 3.141.59 standalone chromium through run-driver"
    ]
  },
  "library/browsertype-launch.spec.ts": {
    "failing": [
      "should reject all promises when browser is closed",
      "should reject if launched browser fails immediately",
      "should handle timeout",
      "should handle exception",
      "should report launch log"
    ]
  },
  "library/capabilities.spec.ts": {
    "failing": [
      "should play audio @smoke",
      "requestFullscreen",
      "should not crash when clicking a label with a <input type=\"file\"/>"
    ],
    "skipped": [
      "webkit should define window.safari"
    ]
  },
  "library/channels.spec.ts": {
    "failing": [
      "should scope CDPSession handles"
    ],
    "skipped": [
      "should work with the domain module"
    ]
  },
  "library/chromium/bfcache.spec.ts": {
    "failing": [
      "bindings should work after restoring from bfcache"
    ]
  },
  "library/chromium/chromium.spec.ts": {
    "failing": [
      "should pass args with spaces",
      "should throw when connecting twice to an already running persistent context (--remote-debugging-port)",
      "should throw when connecting twice to an already running persistent context (--remote-debugging-pipe)",
      "should produce network events, routing, and annotations for Service Worker",
      "should produce network events, routing, and annotations for Service Worker (advanced)"
    ],
    "skipped": [
      "should create a worker from a service worker",
      "should create a worker from service worker with noop routing",
      "should emit new service worker on update",
      "serviceWorkers() should return current workers",
      "should close service worker together with the context",
      "httpCredentials",
      "serviceWorker(), and fromServiceWorker() work",
      "should intercept service worker requests (main and within)",
      "should report failure (due to content-type) of main service worker request",
      "should report failure (due to redirect) of main service worker request",
      "should intercept service worker importScripts",
      "should report intercepted service worker requests in HAR",
      "should intercept only serviceworker request, not page",
      "should intercept service worker update requests",
      "setOffline",
      "setExtraHTTPHeaders"
    ]
  },
  "library/chromium/connect-over-cdp.spec.ts": {
    "failing": [
      "should connect to an existing cdp session",
      "should use logger in default context",
      "should cleanup artifacts dir after connectOverCDP disconnects due to ws close",
      "should connectOverCDP and manage downloads in default context",
      "should connect to an existing cdp session twice",
      "should connect to existing page with iframe and navigate",
      "should connect to existing service workers",
      "should connect over a ws endpoint",
      "should report all pages in an existing browser",
      "should connect via https",
      "should return valid browser from context.browser()",
      "should connect to an existing cdp session when passed as a first argument",
      "should use proxy with connectOverCDP",
      "should be able to connect via localhost",
      "should allow tracing over cdp session",
      "setInputFiles should preserve lastModified timestamp",
      "should not reuse utility worlds between two clients"
    ],
    "skipped": [
      "should send extra headers with connect request",
      "should send default User-Agent header with connect request",
      "emulate media should not be affected by second connectOverCDP"
    ]
  },
  "library/chromium/css-coverage.spec.ts": {
    "failing": [
      "should work",
      "should report sourceURLs",
      "should report multiple stylesheets",
      "should report stylesheets that have no coverage",
      "should work with media queries",
      "should work with complicated usecases",
      "should ignore injected stylesheets",
      "should report stylesheets across navigations",
      "should NOT report scripts across navigations",
      "should work with a recently loaded stylesheet"
    ]
  },
  "library/chromium/disable-web-security.spec.ts": {
    "failing": [
      "test utility world in popup w/ --disable-web-security"
    ]
  },
  "library/chromium/extensions.spec.ts": {
    "failing": [
      "should give access to the service worker",
      "should give access to the service worker when recording video",
      "should report console messages from content script"
    ],
    "skipped": [
      "should support request/response events in the service worker"
    ]
  },
  "library/chromium/js-coverage.spec.ts": {
    "failing": [
      "should work",
      "should report sourceURLs",
      "should ignore eval() scripts by default",
      "shouldn't ignore eval() scripts if reportAnonymousScripts is true",
      "should report multiple scripts",
      "should report scripts across navigations when disabled",
      "should NOT report scripts across navigations when enabled",
      "should not hang when there is a debugger statement"
    ]
  },
  "library/chromium/launcher.spec.ts": {
    "failing": [
      "should not create pages automatically"
    ],
    "skipped": [
      "should open devtools when \"devtools: true\" option is given"
    ]
  },
  "library/chromium/oopif.spec.ts": {
    "failing": [
      "should report oopif frames",
      "should handle oopif detach",
      "should handle remote -> local -> remote transitions",
      "should expose function",
      "should emulate media",
      "should emulate offline",
      "should support context options",
      "should respect route",
      "should take screenshot",
      "should load oopif iframes with subresources and route",
      "should report main requests",
      "should support exposeFunction",
      "should support addInitScript",
      "should click a button when it overlays oopif",
      "should report google.com frame with headed",
      "ElementHandle.boundingBox() should work",
      "should click",
      "contentFrame should work",
      "should allow cdp sessions on oopifs",
      "should be able to click in iframe",
      "should not throw on exposeFunction when oopif detaches",
      "should allow to re-connect to OOPIFs with CDP when iframes were there already"
    ],
    "skipped": [
      "should get the proper viewport",
      "should emit filechooser event for iframe"
    ]
  },
  "library/chromium/session.spec.ts": {
    "failing": [
      "should work",
      "should send events",
      "should enable and disable domains independently",
      "should be able to detach session",
      "should throw nice errors",
      "should work with main frame",
      "should throw if target is part of main",
      "should not break page.close()",
      "should detach when page closes",
      "should reject protocol calls when page closes",
      "should work with newBrowserCDPSession"
    ]
  },
  "library/chromium/tracing.spec.ts": {
    "failing": [
      "should output a trace",
      "should create directories as needed",
      "should run with custom categories if provided",
      "should throw if tracing on two pages",
      "should return a buffer",
      "should work without options",
      "should support a buffer without a path"
    ]
  },
  "library/client-certificates.spec.ts": {
    "failing": [
      "should pass with matching certificates"
    ]
  },
  "library/debug-controller.spec.ts": {
    "failing": [
      "should pick element",
      "should reset for reuse",
      "should record",
      "should reset routes before reuse"
    ]
  },
  "library/defaultbrowsercontext-1.spec.ts": {
    "failing": [
      "context.cookies() should work @smoke",
      "context.addCookies() should work",
      "context.clearCookies() should work",
      "should support viewport option",
      "should support deviceScaleFactor option",
      "should support userAgent option",
      "should support bypassCSP option",
      "should support javascriptEnabled option",
      "should support httpCredentials option",
      "should support offline option",
      "should support acceptDownloads option"
    ]
  },
  "library/defaultbrowsercontext-2.spec.ts": {
    "failing": [
      "should support hasTouch option",
      "should work in persistent context",
      "should support colorScheme option",
      "should support reducedMotion option",
      "should support forcedColors option",
      "should support contrast option",
      "should support timezoneId option",
      "should support locale option",
      "should support geolocation and permissions options",
      "should support ignoreHTTPSErrors option",
      "should support extraHTTPHeaders option",
      "should accept userDataDir",
      "should accept relative userDataDir",
      "should restore state from userDataDir",
      "should create userDataDir if it does not exist",
      "should have default URL when launching browser",
      "should have passed URL when launching with ignoreDefaultArgs: true",
      "should handle timeout",
      "should fire close event for a persistent context",
      "coverage should work",
      "should respect selectors",
      "should connect to a browser with the default page",
      "should support har option",
      "user agent is up to date",
      "dialog.accept should work",
      "exposes browser"
    ],
    "skipped": [
      "should handle exception"
    ]
  },
  "library/download.spec.ts": {
    "failing": [
      "should be able to download a inline PDF file via response interception",
      "should report downloads with interception"
    ],
    "skipped": [
      "should be able to download a PDF file",
      "should be able to download a inline PDF file via navigation",
      "should save to user-specified path",
      "should download even if there is no \"attachment\" value",
      "should convert navigation to a resource with unsupported mime type into download",
      "should download links with data url",
      "should download successfully when routing",
      "should report download when navigation turns into download @smoke",
      "should work with Cross-Origin-Opener-Policy",
      "should report downloads with acceptDownloads: false",
      "should report downloads with acceptDownloads: true",
      "should report proper download url when download is from download attribute",
      "should report downloads for download attribute",
      "should save to user-specified path without updating original path",
      "should save to two different paths with multiple saveAs calls",
      "should save to overwritten filepath",
      "should create subdirectories when saving to non-existent user-specified path",
      "should error when saving with downloads disabled",
      "should error when saving after deletion",
      "should report non-navigation downloads",
      "should report download path within page.on('download', …) handler for Files",
      "should report download path within page.on('download', …) handler for Blobs",
      "should report alt-click downloads",
      "should report new window downloads",
      "should delete file",
      "should expose stream",
      "should delete downloads on context destruction",
      "should delete downloads on browser gone",
      "should close the context without awaiting the download",
      "should throw if browser dies",
      "should download large binary.zip",
      "should be able to cancel pending downloads",
      "should not fail explicitly to cancel a download even if that is already finished",
      "should emit download event from nested iframes"
    ]
  },
  "library/downloads-path.spec.ts": {
    "failing": [
      "should accept downloads in persistent context",
      "should delete downloads when persistent context closes"
    ],
    "skipped": [
      "should keep downloadsPath folder",
      "should delete downloads when context closes",
      "should report downloads in downloadsPath folder",
      "should report downloads in downloadsPath folder with a relative path"
    ]
  },
  "library/emulation-focus.spec.ts": {
    "failing": [
      "should focus popups by default"
    ],
    "skipped": [
      "should not affect screenshots"
    ]
  },
  "library/favicon.spec.ts": {
    "skipped": [
      "should load svg favicon with prefer-color-scheme"
    ]
  },
  "library/fetch-proxy.spec.ts": {
    "skipped": [
      "should send correct ALPN protocol to HTTPS proxy"
    ]
  },
  "library/geolocation.spec.ts": {
    "skipped": [
      "should work @smoke",
      "should isolate contexts",
      "should use context options",
      "watchPosition should be notified",
      "should use context options for popup"
    ]
  },
  "library/har.spec.ts": {
    "failing": [
      "should have version and creator",
      "should have pages in persistent context",
      "should include postData",
      "should include binary postData",
      "should include form params",
      "should include set-cookies",
      "should include set-cookies with comma",
      "should include content @smoke",
      "should attach content",
      "should include sizes",
      "should return receive time",
      "should report the correct _transferSize with PNG files",
      "should have popup requests",
      "should have connection details",
      "should have security details",
      "should have connection details for redirects",
      "should have connection details for failed requests",
      "should return server address directly from response",
      "should return security details directly from response"
    ],
    "skipped": [
      "should filter favicon and favicon redirects"
    ]
  },
  "library/headful.spec.ts": {
    "failing": [
      "should have default url when launching browser @smoke",
      "should close browser with beforeunload page",
      "should click in OOPIF",
      "should click bottom row w/ infobar in OOPIF",
      "headless and headful should use same default fonts"
    ],
    "skipped": [
      "should close browsercontext with pending beforeunload dialog",
      "should click background tab"
    ]
  },
  "library/hit-target.spec.ts": {
    "failing": [
      "should block all events when hit target is wrong and element detaches",
      "should not click iframe overlaying the target",
      "should click into frame inside closed shadow root",
      "should detect overlaid element in a transformed iframe"
    ]
  },
  "library/ignorehttpserrors.spec.ts": {
    "skipped": [
      "serviceWorker should intercept document request"
    ]
  },
  "library/launcher.spec.ts": {
    "failing": [
      "should throw a friendly error if its headed and there is no xserver on linux running"
    ]
  },
  "library/locator-generator.spec.ts": {
    "failing": [
      "reverse engineer internal:has-text locators"
    ]
  },
  "library/modernizr.spec.ts": {
    "skipped": [
      "Safari Desktop",
      "Mobile Safari"
    ]
  },
  "library/multiclient.spec.ts": {
    "failing": [
      "should not allow parallel js coverage and cleanup upon disconnect",
      "should not allow parallel css coverage",
      "last emulateMedia wins",
      "should launch persistent"
    ],
    "skipped": [
      "should chain routes with changed url"
    ]
  },
  "library/page-clock.frozen.spec.ts": {
    "skipped": [
      "clock should be frozen",
      "clock should be realtime"
    ]
  },
  "library/page-clock.spec.ts": {
    "failing": [
      "triggers simultaneous timers",
      "triggers multiple simultaneous timers",
      "creates updated Date while ticking",
      "passes 8 seconds",
      "passes 1 minute",
      "replaces global setInterval"
    ]
  },
  "library/page-close.spec.ts": {
    "failing": [
      "expect should not print timed out error message when page closes",
      "should reject all promises when page is closed",
      "interrupt request.response() and request.allHeaders() on page.close",
      "should reject response.finished if page closes"
    ]
  },
  "library/page-event-crash.spec.ts": {
    "skipped": [
      "should emit crash event when page crashes",
      "should throw on any action after page crashes",
      "should cancel waitForEvent when page crashes",
      "should cancel navigation when page crashes",
      "should be able to close context when page crashes"
    ]
  },
  "library/pdf.spec.ts": {
    "failing": [
      "should be able to generate outline"
    ]
  },
  "library/permissions.spec.ts": {
    "failing": [
      "should support clipboard read",
      "storage access",
      "should deny permission when not listed",
      "should fail when bad permission is given",
      "should accumulate when adding",
      "should clear permissions",
      "should grant permission when listed for all domains",
      "should grant permission when creating context",
      "should trigger permission onchange",
      "should isolate permissions between browser contexts",
      "should be able to use the local-fonts API"
    ]
  },
  "library/popup.spec.ts": {
    "failing": [
      "should inherit user agent from browser context @smoke",
      "should respect routes from browser context",
      "should inherit extra headers from browser context",
      "should inherit offline from browser context",
      "should inherit http credentials from browser context",
      "should inherit touch support from browser context",
      "should inherit viewport size from browser context",
      "should respect routes from browser context when using window.open",
      "BrowserContext.addInitScript should apply to a cross-process popup",
      "should not throttle rAF in the opener page"
    ],
    "skipped": [
      "should use viewport size from window features"
    ]
  },
  "library/proxy.spec.ts": {
    "failing": [
      "should authenticate",
      "should work with authenticate followed by redirect",
      "should exclude patterns",
      "loopback address",
      "link-local"
    ],
    "skipped": [
      "should use proxy with emulated user agent"
    ]
  },
  "library/resource-timing.spec.ts": {
    "failing": [
      "should work when serving from memory cache"
    ]
  },
  "library/role-utils.spec.ts": {
    "failing": [
      "wpt accname #1",
      "wpt accname #2",
      "wpt accname #3",
      "svg role=presentation"
    ]
  },
  "library/route-web-socket.spec.ts": {
    "failing": [
      "should work with binaryType=blob",
      "should pass through the required protocol"
    ]
  },
  "library/screenshot.spec.ts": {
    "failing": [
      "should work with a mobile viewport",
      "should work with a mobile viewport and clip",
      "should work with a mobile viewport and fullPage",
      "should work with device scale factor",
      "should work with device scale factor and clip",
      "should work with device scale factor and scale:css",
      "should work with device scale factor, clip and scale:css",
      "should handle vh units ",
      "element screenshot should work with a mobile viewport",
      "element screenshot should work with device scale factor",
      "should restore default viewport after fullPage screenshot",
      "should restore viewport after page screenshot and exception",
      "should restore viewport after page screenshot and timeout",
      "should restore viewport after element screenshot and exception",
      "element screenshots should handle vh units ",
      "should capture full element when larger than viewport with device scale factor",
      "should capture full element when larger than viewport with device scale factor and scale:css",
      "page screenshot should capture css transform with device pixels"
    ],
    "skipped": [
      "should run in parallel in multiple pages",
      "should work if the main resource hangs"
    ]
  },
  "library/selector-generator.spec.ts": {
    "failing": [
      "should prefer button over inner span",
      "should prefer role=button over inner span",
      "should not prefer zero-sized button over inner span",
      "should generate text and normalize whitespace",
      "should not escape spaces inside named attr selectors",
      "should generate text for <input type=button>",
      "should trim text",
      "should try to improve role name",
      "should try to improve text",
      "should try to improve text by shortening",
      "should try to improve label text by shortening",
      "should not improve guid text",
      "should not escape text with >>",
      "should escape text with quote",
      "should escape text with slash",
      "should not use text for select",
      "should use ordinal for identical nodes",
      "should prefer data-testid",
      "should use data-testid in strict errors",
      "should handle first non-unique data-testid",
      "should handle second non-unique data-testid",
      "should use readable id",
      "should not use generated id",
      "should use internal:has-text",
      "should use internal:has-text with regexp",
      "should use internal:has-text with regexp with a quote",
      "should chain text after parent",
      "should use parent text",
      "should separate selectors by >>",
      "should trim long text",
      "should use nested ordinals",
      "should prefer class to ordinal",
      "should properly join child selectors under nested ordinals",
      "should not use input[value]",
      "should find text in shadow dom",
      "should match in shadow dom",
      "should match in deep shadow dom",
      "should work in dynamic iframes without navigation",
      "should use the name attributes for elements that can have it",
      "should work with tricky attributes",
      "should work without CSS.escape",
      "should not over-escape for CSS syntax",
      "should ignore empty aria-label for candidate consideration",
      "should accept valid aria-label for candidate consideration",
      "should ignore empty role for candidate consideration",
      "should not accept invalid role for candidate consideration",
      "should ignore empty data-test-id for candidate consideration",
      "should accept valid data-test-id for candidate consideration",
      "should generate label selector",
      "should prefer role other input[type]",
      "should generate title selector",
      "should generate exact text when necessary",
      "should generate exact title when necessary",
      "should generate exact placeholder when necessary",
      "should generate exact role when necessary",
      "should generate exact label when necessary",
      "should generate relative selector",
      "should generate multiple: noText in role",
      "should generate multiple: noText in text",
      "should generate multiple: noId",
      "should generate multiple: noId noText",
      "should prefer role with hasText to css with hasText",
      "role",
      "placeholder",
      "name",
      "type"
    ]
  },
  "library/shared-worker.spec.ts": {
    "skipped": [
      "should survive shared worker restart"
    ]
  },
  "library/slowmo.spec.ts": {
    "skipped": [
      "Page SlowMo reload",
      "Page SlowMo setInputFiles",
      "Frame SlowMo setInputFiles"
    ]
  },
  "library/tap.spec.ts": {
    "failing": [
      "should send all of the correct events @smoke",
      "trial run should not tap",
      "should not send mouse events touchstart is canceled",
      "should not send mouse events when touchend is canceled",
      "should not wait for a navigation caused by a tap",
      "should work with modifiers",
      "should send well formed touch points",
      "should wait until an element is visible to tap it"
    ]
  },
  "library/trace-viewer.spec.ts": {
    "failing": [
      "should render console",
      "should open console errors on click"
    ],
    "skipped": [
      "should show params and return value",
      "should show null as a param",
      "should have correct snapshot size",
      "should have correct stack trace",
      "should have network requests",
      "should filter network requests by resource type",
      "should show font preview",
      "should filter network requests by url",
      "should have network request overrides",
      "should have network request overrides 2",
      "should show snapshot URL",
      "should popup snapshot",
      "should capture iframe with sandbox attribute",
      "should capture data-url svg iframe",
      "should contain adopted style sheets",
      "should work with adopted style sheets and replace/replaceSync",
      "should work with adopted style sheets and all: unset",
      "should work with nesting CSS selectors",
      "should restore scroll positions",
      "should restore control values",
      "should work with meta CSP",
      "should handle multiple headers",
      "should handle src=blob",
      "should handle file URIs",
      "should preserve currentSrc",
      "should register custom elements",
      "should highlight target elements",
      "should highlight target element in shadow dom",
      "should highlight expect failure",
      "should show action source",
      "should follow redirects",
      "should include metainfo",
      "should open v6 trace file",
      "should not crash with broken locator",
      "should serve overridden request",
      "should display waitForLoadState even if did not wait for it",
      "should display language-specific locators",
      "should pick locator",
      "should update highlight when typing locator",
      "should update highlight when typing snapshot",
      "should open trace-1.31",
      "should open trace-1.37",
      "should prefer later resource request with the same method",
      "should ignore 304 responses",
      "should pick locator in iframe",
      "should highlight locator in iframe while typing",
      "should preserve noscript when javascript is disabled",
      "should remove noscript by default",
      "should remove noscript when javaScriptEnabled is set to true",
      "should open snapshot in new browser context",
      "should show similar actions from legacy library-only trace",
      "should show correct request start time",
      "should not record route actions",
      "should not record network actions",
      "should show baseURL in metadata pane",
      "should not leak recorders",
      "should serve css without content-type",
      "canvas disabled title",
      "canvas clipping",
      "canvas clipping in iframe",
      "should show only one pointer with multilevel iframes",
      "should show a popover",
      "should show a modal dialog",
      "should open settings dialog",
      "should toggle theme color",
      "should toggle canvas rendering",
      "should render blob trace received from message",
      "shouldn't render not-blob trace received from message",
      "should not trip over complex urls in style tags",
      "should render locator descriptions",
      "should load trace from HTTP with progress indicator",
      "should filter actions",
      "should handle failed snapshots due to dialog"
    ]
  },
  "library/tracing.spec.ts": {
    "failing": [
      "should respect tracesDir and name",
      "should not include trace resources from the previous chunks"
    ],
    "skipped": [
      "should collect trace with resources, but no js",
      "should produce screencast frames fit",
      "should produce screencast frames crop",
      "should produce screencast frames scale"
    ]
  },
  "library/unroute-behavior.spec.ts": {
    "skipped": [
      "context.unroute should not wait for pending handlers to complete",
      "context.unrouteAll should wait for pending handlers to complete",
      "context.unrouteAll should not wait for pending handlers to complete if behavior is ignoreErrors"
    ]
  },
  "library/video.spec.ts": {
    "failing": [
      "should saveAs video",
      "should work with old options",
      "should capture static page",
      "should continue recording main page after popup closes",
      "should delete video",
      "should capture navigation",
      "should capture css transformation",
      "should work for popups",
      "should use viewport scaled down to fit into 800x800 as default size",
      "should be 800x450 by default",
      "should be 800x600 with null viewport",
      "should capture static page in persistent context @smoke",
      "should emulate an iphone",
      "should throw on browser close",
      "should throw if browser dies",
      "should wait for video to finish if page was closed"
    ],
    "skipped": [
      "should expose video path",
      "should expose video path blank page",
      "should work with weird screen resolution",
      "should work with relative path for recordVideo.dir",
      "should expose video path blank popup",
      "should scale frames down to the requested size ",
      "should not create video for internal pages",
      "should capture full viewport",
      "should capture full viewport on hidpi",
      "should work with video+trace"
    ]
  },
  "library/web-socket.spec.ts": {
    "skipped": [
      "should emit close events",
      "should emit frame events",
      "should filter out the close events when the server closes with a message",
      "should pass self as argument to close event",
      "should emit binary frame events",
      "should emit error",
      "should not have stray error events",
      "should reject waitForEvent on socket close",
      "should reject waitForEvent on page close",
      "should turn off when offline"
    ]
  },
  "page/elementhandle-bounding-box.spec.ts": {
    "failing": [
      "should work",
      "should handle nested frames",
      "should return null for invisible elements"
    ]
  },
  "page/elementhandle-click.spec.ts": {
    "failing": [
      "should work with Node removed",
      "should work for TextNodes"
    ]
  },
  "page/elementhandle-content-frame.spec.ts": {
    "failing": [
      "should work for cross-frame evaluations"
    ]
  },
  "page/elementhandle-convenience.spec.ts": {
    "failing": [
      "should have a nice preview for non-ascii attributes/children",
      "innerText should work"
    ]
  },
  "page/elementhandle-misc.spec.ts": {
    "failing": [
      "should hover"
    ]
  },
  "page/elementhandle-owner-frame.spec.ts": {
    "failing": [
      "should work for cross-process iframes"
    ]
  },
  "page/elementhandle-query-selector.spec.ts": {
    "failing": [
      "should work for adopted elements"
    ]
  },
  "page/elementhandle-screenshot.spec.ts": {
    "failing": [
      "should capture full element when larger than viewport in parallel",
      "should capture full element when larger than viewport",
      "should not issue resize event"
    ]
  },
  "page/elementhandle-scroll-into-view.spec.ts": {
    "failing": [
      "should throw for detached element",
      "should wait for display:none to become visible",
      "should scroll display:contents into view",
      "should wait for nested display:none to become visible",
      "should timeout waiting for visible"
    ]
  },
  "page/elementhandle-wait-for-element-state.spec.ts": {
    "failing": [
      "should wait for stable position"
    ]
  },
  "page/expect-boolean.spec.ts": {
    "failing": [
      "over navigation"
    ]
  },
  "page/expect-matcher-result.spec.ts": {
    "failing": [
      "toHaveScreenshot should populate matcherResult"
    ]
  },
  "page/frame-evaluate.spec.ts": {
    "failing": [
      "should have different execution contexts",
      "should dispose context on navigation",
      "should dispose context on cross-origin navigation",
      "should allow cross-frame element handles",
      "should not allow cross-frame element handles when frames do not script each other"
    ],
    "skipped": [
      "should work in iframes that failed initial navigation",
      "should work in iframes that interrupted initial javascript url navigation"
    ]
  },
  "page/frame-frame-element.spec.ts": {
    "failing": [
      "should work inside closed shadow root",
      "should work inside declarative shadow root"
    ]
  },
  "page/frame-hierarchy.spec.ts": {
    "failing": [
      "should handle nested frames @smoke",
      "should detach child frames on navigation",
      "should support framesets",
      "should report frame.name()"
    ],
    "skipped": [
      "should send \"framenavigated\" when navigating on anchor URLs",
      "should refuse to display x-frame-options:deny iframe"
    ]
  },
  "page/interception.spec.ts": {
    "failing": [
      "should intercept after a service worker"
    ],
    "skipped": [
      "should intercept blob url requests"
    ]
  },
  "page/jshandle-to-string.spec.ts": {
    "failing": [
      "should work for complicated objects",
      "should beautifully render sparse arrays",
      "should work for promises",
      "should work with different subtypes @smoke",
      "should work with previewable subtypes"
    ]
  },
  "page/locator-click.spec.ts": {
    "failing": [
      "should work for TextNodes"
    ]
  },
  "page/locator-is-visible.spec.ts": {
    "skipped": [
      "isVisible during navigation should not throw"
    ]
  },
  "page/locator-misc-1.spec.ts": {
    "skipped": [
      "should upload the file"
    ]
  },
  "page/locator-misc-2.spec.ts": {
    "failing": [
      "should scroll zero-sized element into view",
      "should take screenshot",
      "should return bounding box"
    ]
  },
  "page/matchers.misc.spec.ts": {
    "failing": [
      "should outlive frame navigation"
    ]
  },
  "page/network-post-data.spec.ts": {
    "failing": [
      "should return correct postData buffer for utf-8 body",
      "should return post data w/o content-type @smoke",
      "should throw on invalid JSON in post data",
      "should return post data for PUT requests",
      "should get post data for file/blob",
      "should get post data for navigator.sendBeacon api calls"
    ]
  },
  "page/page-accessibility.spec.ts": {
    "failing": [
      "should work @smoke",
      "should work with regular text",
      "roledescription",
      "orientation",
      "autocomplete",
      "multiselectable",
      "keyshortcuts",
      "should not report text nodes inside controls",
      "rich text editable fields should have children",
      "rich text editable fields with role should have children",
      "non editable textbox with role and tabIndex and label should not have children",
      "checkbox with and tabIndex and label should not have children",
      "checkbox without label should not have children",
      "should work a button",
      "should work an input",
      "should work on a menu",
      "should return null when the element is no longer in DOM",
      "should show uninteresting nodes",
      "should work when there is a title ",
      "should work with aria-invalid accessibility tree"
    ]
  },
  "page/page-add-locator-handler.spec.ts": {
    "failing": [
      "should work with locator.hover()",
      "should throw when handler times out",
      "should work with toHaveScreenshot",
      "should work with times: option",
      "should work with noWaitAfter"
    ]
  },
  "page/page-add-script-tag.spec.ts": {
    "failing": [
      "should work with a path",
      "should throw when added with content to the CSP page"
    ]
  },
  "page/page-add-style-tag.spec.ts": {
    "failing": [
      "should throw an error if loading from url fail",
      "should include sourceURL when path is provided"
    ]
  },
  "page/page-aria-snapshot-ai.spec.ts": {
    "failing": [
      "should stitch all frame snapshots"
    ]
  },
  "page/page-autowaiting-basic.spec.ts": {
    "failing": [
      "should await form-get on click"
    ]
  },
  "page/page-autowaiting-no-hang.spec.ts": {
    "failing": [
      "opening a popup",
      "goBack in the middle of navigation that commits"
    ]
  },
  "page/page-basic.spec.ts": {
    "failing": [
      "page.url should include hashes",
      "page.frame should respect name",
      "frame.press should work"
    ]
  },
  "page/page-click-react.spec.ts": {
    "failing": [
      "should not retarget when element changes on hover"
    ]
  },
  "page/page-click-scroll.spec.ts": {
    "failing": [
      "should scroll into view display:contents"
    ],
    "skipped": [
      "should scroll into view display:contents with position"
    ]
  },
  "page/page-click-timeout-2.spec.ts": {
    "failing": [
      "should timeout waiting for display:none to be gone"
    ]
  },
  "page/page-click-timeout-3.spec.ts": {
    "failing": [
      "should still click when force but hit target is obscured"
    ]
  },
  "page/page-click.spec.ts": {
    "failing": [
      "should issue clicks in parallel in page and popup",
      "should select the text by triple clicking",
      "should waitFor visibility:hidden to be gone",
      "should scroll and click the button",
      "should double click the button",
      "should click a rotated button",
      "trial run should not click",
      "should report nice error when element is detached and force-clicked",
      "should not hang when frame is detached",
      "should click in a transformed iframe with force",
      "should set PointerEvent.pressure on pointerdown",
      "should set PointerEvent.pressure on pointermove"
    ],
    "skipped": [
      "should click the button with fixed position inside an iframe",
      "should click in a transformed iframe",
      "should click in a nested transformed iframe",
      "should fire contextmenu event on right click in correct order"
    ]
  },
  "page/page-dialog.spec.ts": {
    "skipped": [
      "should handle multiple alerts",
      "should handle multiple confirms"
    ]
  },
  "page/page-dispatchevent.spec.ts": {
    "failing": [
      "should dispatch click after navigation ",
      "should dispatch wheel event"
    ]
  },
  "page/page-drag.spec.ts": {
    "failing": [
      "should send the right events",
      "should not send dragover on the first mousemove",
      "should work inside iframe",
      "should cancel on escape"
    ],
    "skipped": [
      "should drag into an iframe",
      "should drag out of an iframe"
    ]
  },
  "page/page-emulate-media.spec.ts": {
    "failing": [
      "should emulate type @smoke",
      "should emulate colorScheme should work @smoke",
      "should default to light",
      "should work during navigation",
      "should change the actual colors in css",
      "should emulate reduced motion",
      "should keep reduced motion and color emulation after reload",
      "should emulate forcedColors ",
      "should emulate contrast "
    ]
  },
  "page/page-evaluate.spec.ts": {
    "failing": [
      "should throw when evaluation triggers reload",
      "should throw for too deep reference chain",
      "should throw a nice error after a navigation",
      "should work with new Function() and CSP"
    ]
  },
  "page/page-event-console.spec.ts": {
    "failing": [
      "should work @smoke",
      "should work for different console API calls",
      "should not fail for window object",
      "should use object previews for arrays and objects"
    ],
    "skipped": [
      "should trigger correct Log"
    ]
  },
  "page/page-event-network.spec.ts": {
    "failing": [
      "should fire events in proper order"
    ],
    "skipped": [
      "should resolve responses after a navigation"
    ]
  },
  "page/page-event-pageerror.spec.ts": {
    "skipped": [
      "should fire",
      "should not receive console message for pageError",
      "should contain sourceURL",
      "should contain the Error.name property",
      "should support an empty Error.name property",
      "should handle odd values",
      "should handle object",
      "should handle window",
      "should emit error from unhandled rejects"
    ]
  },
  "page/page-event-popup.spec.ts": {
    "failing": [
      "should work with clicking target=_blank",
      "should work with fake-clicking target=_blank and rel=noopener",
      "should report popup opened from iframes"
    ],
    "skipped": [
      "should be able to capture alert"
    ]
  },
  "page/page-event-request.spec.ts": {
    "failing": [
      "should report requests and responses handled by service worker",
      "should report requests and responses handled by service worker with routing",
      "should report navigation requests and responses handled by service worker with routing",
      "should fire requestfailed when intercepting race",
      "should not expose preflight OPTIONS request",
      "should not expose preflight OPTIONS request with network interception"
    ],
    "skipped": [
      "should finish 204 request"
    ]
  },
  "page/page-expose-function.spec.ts": {
    "failing": [
      "exposeBindingHandle should not throw during navigation",
      "should work with busted Array.prototype.map/push"
    ],
    "skipped": [
      "should be callable from-inside addInitScript",
      "exposeBinding(handle) should work with element handles"
    ]
  },
  "page/page-filechooser.spec.ts": {
    "failing": [
      "should upload multiple large files",
      "should emit event once",
      "should emit event via prepend",
      "should emit event for iframe",
      "should emit event on/off",
      "should emit event addListener/removeListener",
      "should work when file input is attached to DOM",
      "should work when file input is not attached to DOM",
      "should not throw when filechooser belongs to iframe",
      "should work with no timeout",
      "should return the same file chooser when there are many watchdogs simultaneously",
      "should accept single file",
      "should be able to read selected file",
      "should be able to reset selected files with empty file list",
      "should work for single file pick",
      "should work for \"multiple\"",
      "should work for \"webkitdirectory\"",
      "should emit event after navigation",
      "should trigger listener added before navigation"
    ]
  },
  "page/page-fill.spec.ts": {
    "failing": [
      "input event.composed should be true and cross shadow dom boundary - color",
      "input event.composed should be true and cross shadow dom boundary - month",
      "should not double-fill in contenteditable with beforeinput handler in Firefox",
      "should be able to clear using fill()"
    ]
  },
  "page/page-focus.spec.ts": {
    "failing": [
      "should emit blur event"
    ],
    "skipped": [
      "should traverse only form elements",
      "tab should cycle between single input and browser",
      "tab should cycle between document elements and browser"
    ]
  },
  "page/page-goto.spec.ts": {
    "failing": [
      "should work cross-process",
      "should fail when replaced by another navigation",
      "should not leak listeners during navigation",
      "should navigate to URL with hash and fire requests without hash",
      "should be able to navigate to a page controlled by service worker",
      "should send referer",
      "should send referer of cross-origin URL",
      "should override referrer-policy",
      "should fail when canceled by another navigation",
      "should report raw buffer for main resource"
    ],
    "skipped": [
      "should work with anchor navigation"
    ]
  },
  "page/page-history.spec.ts": {
    "failing": [
      "goBack/goForward should work with bfcache-able pages",
      "page.reload during renderer-initiated navigation",
      "page.reload should work on a page with a hash at the end",
      "should reload proper page"
    ],
    "skipped": [
      "page.reload should work with data url",
      "page.goBack during renderer-initiated navigation"
    ]
  },
  "page/page-keyboard.spec.ts": {
    "failing": [
      "should send a character with insertText",
      "insertText should only emit input event",
      "should not type canceled events",
      "should shift raw codes",
      "should specify location",
      "should press Enter",
      "should type emoji into an iframe",
      "should work after a cross origin navigation",
      "should have correct Keydown/Keyup order when pressing Escape key"
    ],
    "skipped": [
      "should send proper codes while typing with shift",
      "should support MacOS shortcuts",
      "should expose keyIdentifier in webkit",
      "should move to the start of the document"
    ]
  },
  "page/page-mouse.spec.ts": {
    "failing": [
      "should trigger hover state with removed window.Node"
    ]
  },
  "page/page-navigation.spec.ts": {
    "failing": [
      "should work with _blank target",
      "should work with _blank target in form"
    ]
  },
  "page/page-network-idle.spec.ts": {
    "failing": [
      "should wait for networkidle in setContent from the child frame",
      "should wait for networkidle from the popup"
    ]
  },
  "page/page-network-request.spec.ts": {
    "failing": [
      "should get the same headers as the server",
      "should not return allHeaders() until they are available",
      "should get the same headers as the server CORS",
      "should not get preflight CORS requests when intercepting",
      "should return postData",
      "should work with binary post data",
      "should work with binary post data and interception",
      "should parse the json post data",
      "should parse the data if content-type is application/x-www-form-urlencoded",
      "should parse the data if content-type is application/x-www-form-urlencoded; charset=UTF-8",
      "should return multipart/form-data",
      "should return event source",
      "should report raw headers",
      "should report raw response headers in redirects",
      "should not allow to access frame on popup main request",
      "page.reload return 304 status code",
      "should handle mixed-content blocked requests"
    ]
  },
  "page/page-network-response.spec.ts": {
    "failing": [
      "should return multiple header value",
      "should wait until response completes",
      "should report all headers",
      "should report multiple set-cookie headers",
      "should behave the same way for headers and allHeaders",
      "should return set-cookie header after route.fulfill",
      "should return headers after route.fulfill",
      "should report if request was fromServiceWorker",
      "should return body for prefetch script"
    ]
  },
  "page/page-network-sizes.spec.ts": {
    "failing": [
      "should set bodySize, headersSize, and transferSize",
      "should have the correct responseBodySize",
      "should have the correct responseBodySize for chunked request",
      "should have the correct responseBodySize with gzip compression",
      "should handle redirects",
      "should work with 200 status code",
      "should work with 401 status code",
      "should work with 404 status code",
      "should work with 500 status code"
    ],
    "skipped": [
      "should have correct responseBodySize for 404 with content",
      "should return sizes without hanging"
    ]
  },
  "page/page-request-continue.spec.ts": {
    "failing": [
      "should not allow to override unsafe HTTP headers",
      "redirected requests should report overridden headers",
      "propagate headers cross origin redirect"
    ]
  },
  "page/page-request-fulfill.spec.ts": {
    "failing": [
      "should allow mocking binary responses",
      "should allow mocking svg with charset",
      "should include the origin header",
      "should fulfill with multiple set-cookie",
      "should fulfill with fetch response that has multiple set-cookie",
      "headerValue should return set-cookie from intercepted response"
    ]
  },
  "page/page-request-gc.spec.ts": {
    "failing": [
      "should work"
    ]
  },
  "page/page-request-intercept.spec.ts": {
    "failing": [
      "should override with defaults when intercepted response not provided",
      "should fulfill popup main request using alias",
      "request.postData is not null when fetching FormData with a Blob",
      "should abort favicon requests if interception is enabled"
    ],
    "skipped": [
      "should intercept multipart/form-data request body"
    ]
  },
  "page/page-route.spec.ts": {
    "failing": [
      "should not override cookie header",
      "should show custom HTTP headers",
      "should work with custom referer headers",
      "should be abortable with custom error codes",
      "should send referer",
      "should add Access-Control-Allow-Origin by default when fulfill",
      "should allow null origin for about:blank",
      "should not auto-intercept non-preflight OPTIONS with network interception",
      "should support cors with POST",
      "should support cors with credentials",
      "should support cors for different methods",
      "should contain raw request header",
      "should intercept when postData is more than 1MB"
    ],
    "skipped": [
      "should not fulfill with redirect status"
    ]
  },
  "page/page-screenshot.spec.ts": {
    "failing": [
      "page screenshot should capture css transform",
      "should capture css box-shadow",
      "should work @smoke",
      "should clip rect",
      "should clip rect with fullPage",
      "should clip elements to the viewport",
      "should take fullPage screenshots",
      "should take fullPage screenshots and mask elements outside of it",
      "should restore viewport after fullPage screenshot",
      "should work for canvas",
      "should capture canvas changes",
      "should work for translateZ",
      "should work while navigating",
      "should work with iframe in shadow",
      "path option should work",
      "path option should create subdirectories",
      "should work with Array deleted",
      "should work",
      "should work with locator",
      "should work with elementhandle",
      "should mask multiple elements",
      "should mask inside iframe",
      "should mask in parallel",
      "should work when mask color is not pink #F0F",
      "should hide elements based on attr",
      "should remove elements based on attr",
      "should not capture pseudo element css animation",
      "should trigger particular events for css transitions",
      "should wait for fonts to load"
    ]
  },
  "page/page-set-extra-http-headers.spec.ts": {
    "failing": [
      "should work @smoke",
      "should work with redirects",
      "should work with extra headers from browser context",
      "should not duplicate referer header"
    ]
  },
  "page/page-set-input-files.spec.ts": {
    "failing": [
      "should throw when uploading a folder in a normal file upload input",
      "should detect mime type",
      "should emit input and change events"
    ],
    "skipped": [
      "should work @smoke",
      "should set from memory",
      "should work with CSP",
      "input event.composed should be true and cross shadow dom boundary",
      "input should trigger events when files changed second time",
      "should preserve lastModified timestamp"
    ]
  },
  "page/page-wait-for-load-state.spec.ts": {
    "failing": [
      "should throw for bad state",
      "should wait for load state of empty url popup",
      "should wait for load state of about:blank popup ",
      "should wait for load state of about:blank popup with noopener ",
      "should wait for load state of popup with network url ",
      "should wait for load state of newPage"
    ]
  },
  "page/page-wait-for-navigation.spec.ts": {
    "failing": [
      "should work with history.replaceState()",
      "should work for cross-process navigations"
    ]
  },
  "page/page-wait-for-response.spec.ts": {
    "failing": [
      "sync predicate should be only called once"
    ]
  },
  "page/page-wait-for-selector-1.spec.ts": {
    "failing": [
      "should resolve promise when node is added",
      "page.waitForSelector is shortcut for main frame",
      "should throw when frame is detached"
    ]
  },
  "page/page-wait-for-selector-2.spec.ts": {
    "failing": [
      "should throw when frame is detached xpath",
      "should work when navigating before node adoption"
    ]
  },
  "page/page-wait-for-url.spec.ts": {
    "failing": [
      "should work with DOM history.back()/history.forward()"
    ],
    "skipped": [
      "should work with commit and about:blank"
    ]
  },
  "page/retarget.spec.ts": {
    "skipped": [
      "setInputFiles should work with label"
    ]
  },
  "page/selectors-react.spec.ts": {
    "skipped": [
      "should work with multi-root elements (fragments)",
      "should work with react memo",
      "should work with react memo"
    ]
  },
  "page/selectors-vue.spec.ts": {
    "skipped": [
      "should work with multi-root elements (fragments)"
    ]
  },
  "page/wheel.spec.ts": {
    "failing": [
      "should dispatch wheel events after popup was opened @smoke"
    ]
  },
  "page/workers.spec.ts": {
    "failing": [
      "should report and intercept network from nested worker"
    ],
    "skipped": [
      "Page.workers @smoke",
      "should emit created and destroyed events",
      "should report console logs",
      "should not report console logs from workers twice",
      "should have JSHandles for console logs",
      "should evaluate",
      "should report errors",
      "should clear upon navigation",
      "should clear upon cross-process navigation",
      "should attribute network activity for worker inside iframe to the iframe",
      "should report network activity",
      "should report network activity on worker creation",
      "should report worker script as network request after redirect",
      "should dispatch console messages when page has workers",
      "should support extra http headers",
      "should support offline"
    ]
  }
}