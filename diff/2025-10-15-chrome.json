{
  "library/beforeunload.spec.ts > should close browsercontext with beforeunload page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/beforeunload.spec.ts > should be able to navigate away from page with beforeunload": {
    "previous": "failed",
    "current": "passed"
  },
  "library/beforeunload.spec.ts > should close page with beforeunload listener": {
    "previous": "passed",
    "current": "failed"
  },
  "library/beforeunload.spec.ts > should support dismissing the dialog multiple times": {
    "previous": "failed",
    "current": "passed"
  },
  "library/beforeunload.spec.ts > should support closing the page after a previous dismiss": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-add-cookies.spec.ts > should isolate persistent cookies": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set multiple cookies": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should default to setting secure cookie for HTTPS websites": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set cookies for a frame": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-add-init-script.spec.ts > should work with browser context scripts for already created pages": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-base-url.spec.ts > should construct a new URL when a baseURL in browser.newContext is passed to page.goto @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-base-url.spec.ts > should construct a new URL when a baseURL in browser.newPage is passed to page.goto": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-base-url.spec.ts > should construct the URLs correctly when a baseURL with a trailing slash in browser.newPage is passed to page.goto": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-base-url.spec.ts > should not construct a new URL when valid URLs are passed": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-basic.spec.ts > window.open should use parent tab context": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-basic.spec.ts > should isolate localStorage and cookies @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-cookies-third-party.spec.ts > third party non-partitioned cookies": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-cookies-third-party.spec.ts > save/load third party non-partitioned cookies": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-cookies-third-party.spec.ts > third party 'Partitioned;' cookies": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-cookies-third-party.spec.ts > should not block third party SameSite=None cookies": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-cookies.spec.ts > should properly report \"Lax\" sameSite cookie": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should round-trip har.zip": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > should produce extracted zip": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should round-trip extracted har.zip": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > should update har.zip for context": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should ignore boundary when matching multipart/form-data body": {
    "previous": "timedOut",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > should update har.zip for page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-locale.spec.ts > should format date": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-locale.spec.ts > should affect Intl.DateTimeFormat().resolvedOptions().locale": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-page-event.spec.ts > should work with Ctrl-clicking": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-pages.spec.ts > should return bounding box with page scale": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-proxy.spec.ts > should use proxy for second page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-proxy.spec.ts > should use socks proxy": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-viewport-mobile.spec.ts > mobile viewport > should scroll when emulating a mobile viewport": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsertype-connect.spec.ts > run-server > socks proxy > should proxy based on the pattern": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > should respect CSP @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > should not crash on storage.getDirectory()": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > loading in HTMLImageElement.prototype": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > should send no Content-Length header for GET requests with a Content-Type": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > should be able to render avif images": {
    "previous": "failed",
    "current": "passed"
  },
  "library/emulation-focus.spec.ts > should provide target for keyboard events": {
    "previous": "passed",
    "current": "failed"
  },
  "library/emulation-focus.spec.ts > should change focused iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should have version and creator": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should use attach mode for zip extension": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should return receive time": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should not hang on resources served from cache": {
    "previous": "failed",
    "current": "passed"
  },
  "library/headful.spec.ts > should(not) block third party cookies": {
    "previous": "passed",
    "current": "failed"
  },
  "library/hit-target.spec.ts > should work with block-block-block inside inline-inline": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should detect overlay from another shadow root": {
    "previous": "passed",
    "current": "failed"
  },
  "library/multiclient.spec.ts > should remove exposed bindings upon disconnect": {
    "previous": "passed",
    "current": "failed"
  },
  "library/page-close.spec.ts > should not treat navigations as new popups": {
    "previous": "failed",
    "current": "passed"
  },
  "library/popup.spec.ts > should expose function from browser context": {
    "previous": "passed",
    "current": "failed"
  },
  "library/popup.spec.ts > should not throttle rAF in the opener page": {
    "previous": "failed",
    "current": "timedOut"
  },
  "library/proxy.spec.ts > should use socks proxy": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should proxy local network requests > by default > localhost": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should proxy local network requests > by default > loopback address": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > wpt accname #0": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > wpt accname #2": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > wpt accname non-manual": {
    "previous": "passed",
    "current": "failed"
  },
  "library/route-web-socket.spec.ts > should work with baseURL": {
    "previous": "passed",
    "current": "failed"
  },
  "library/route-web-socket.spec.ts > no-mock > should work with client-side close": {
    "previous": "passed",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > canvas clipping in iframe": {
    "previous": "failed",
    "current": "timedOut"
  },
  "library/trace-viewer.spec.ts > should show only one pointer with multilevel iframes": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show a popover": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show a modal dialog": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open settings dialog": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should toggle theme color": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should toggle canvas rendering": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should render blob trace received from message": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > shouldn't render not-blob trace received from message": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not trip over complex urls in style tags": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should render locator descriptions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should load trace from HTTP with progress indicator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should filter actions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts >  > should handle failed snapshots due to dialog": {
    "previous": "skipped",
    "current": "passed"
  },
  "page/elementhandle-click.spec.ts > should work with Node removed": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-convenience.spec.ts > should have a nice preview for non-ascii attributes/children": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-convenience.spec.ts > innerHTML should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-misc.spec.ts > should hover": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-misc.spec.ts > should fill input": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-misc.spec.ts > should select single option": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for cross-frame evaluations": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-wait-for-element-state.spec.ts > should wait for stable position": {
    "previous": "failed",
    "current": "passed"
  },
  "page/expect-boolean.spec.ts > toBeAttached > over navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-evaluate.spec.ts > should have correct execution contexts @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-frame-element.spec.ts > should work with contentFrame": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-goto.spec.ts > should return matching responses": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-hierarchy.spec.ts > should detach child frames on navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-click.spec.ts > should work with Node removed": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-convenience.spec.ts > should have a nice preview": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-convenience.spec.ts > innerText should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-misc-1.spec.ts > should fill input": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should work with locator.hover()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should work with toBeVisible": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should wait for hidden by default 2": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should work with noWaitAfter": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-script-tag.spec.ts > should work with a path and type=module": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-script-tag.spec.ts > should work with content": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-aria-snapshot-ai.spec.ts > should stitch all frame snapshots": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-aria-snapshot-ai.spec.ts > should auto-wait for navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-aria-snapshot.spec.ts > should include pseudo codepoints": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-basic.spec.ts > should work with goto following click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-no-hang.spec.ts > clicking in the middle of navigation that commits": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-no-hang.spec.ts > goBack in the middle of navigation that commits": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-basic.spec.ts > page.url should include hashes": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click-react.spec.ts > should not retarget when element changes on hover": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click-timeout-2.spec.ts > should timeout waiting for display:none to be gone": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click-timeout-2.spec.ts > should timeout waiting for visibility:hidden to be gone": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click-timeout-3.spec.ts > should still click when force but hit target is obscured": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click-timeout-4.spec.ts > should click for the second time after first timeout": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click the button after a cross origin navigation ": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should select the text by triple clicking": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should waitFor visible when already visible": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should not wait with force": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should waitFor visibility:hidden to be gone": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click wrapped links": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click on checkbox label and toggle": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should scroll and click the button with smooth scroll behavior": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should double click the button": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click a partially obscured button": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click a rotated button": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should fire contextmenu event on right click": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click the button inside an iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should wait for becoming hit target with trial run": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > trial run should work with short timeout": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > trial run should not double click": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should update modifiers correctly": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should retry when navigating during the click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch click event @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch drag drop events via ElementHandles": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-evaluate-no-stall.spec.ts > should throw while pending navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-evaluate.spec.ts > should work with overridden globalThis.Window/Document/Node": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-console.spec.ts > should not throw when there are console messages in detached iframes": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-load.spec.ts > should fire once with iframe navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-popup.spec.ts > should emit for immediately closed popups 2": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-popup.spec.ts > should work with clicking target=_blank": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-popup.spec.ts > should work with clicking target=_blank and rel=noopener": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should fill textarea @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should fill input": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should fill contenteditable": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should retry on disabled element": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should retry on invisible element": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should not throw when fill causes navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should work cross-process": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should work when navigating to 404": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should not leak listeners during navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should work with self requesting page": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should not resolve goto upon window.stop()": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should return when navigation is committed if commit is specified": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > page.goBack should work for file urls": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > page.reload should work with cross-origin redirect": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > should reload proper page": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should be able to prevent selectAll": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-mouse.spec.ts > should select the text with mouse": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-mouse.spec.ts > should trigger hover state on disabled button": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-mouse.spec.ts > should trigger hover state with removed window.Node": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-navigation.spec.ts > should work with cross-process _blank target": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-idle.spec.ts > should wait for networkidle to succeed navigation with request from previous navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-network-request.spec.ts > should report raw response headers in redirects": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-response.spec.ts > should return multiple header value": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot > should allow transparency": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot > should not issue resize event": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should not capture css animations in shadow DOM": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should capture screenshots after layoutchanges in transitionend event": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-set-input-files.spec.ts > should upload the file": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-set-input-files.spec.ts > should upload large file with relative path": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should pick up ongoing navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should throw for bad state": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-load-state.spec.ts > should work with clicking target=_blank": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with history.pushState()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with DOM history.back()/history.forward()": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with url match": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-navigation.spec.ts > should work for cross-process navigations": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-request.spec.ts > should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-response.spec.ts > should work with no timeout": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-1.spec.ts > should tolerate waitFor=visible": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > should report logs while waiting for hidden": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-1.spec.ts > should work when node is added through innerHTML": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > page.waitForSelector is shortcut for main frame": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-url.spec.ts > should work with commit": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-url.spec.ts > should work with url match for same document navigations": {
    "previous": "failed",
    "current": "passed"
  },
  "page/selectors-css.spec.ts > should work with :has": {
    "previous": "failed",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should survive service worker restart": {
    "current": "passed"
  },
  "library/unit/clock.spec.ts > runFor > does not rewind back in time": {
    "current": "passed"
  },
  "library/unit/clock.spec.ts > fastForward > error does not pause forever": {
    "current": "passed"
  },
  "page/expect-to-have-text.spec.ts > toHaveText with text > do not show \"element(s) not found\" when the real failure is a string mismatch": {
    "current": "passed"
  }
}