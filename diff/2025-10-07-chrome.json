{
  "library/beforeunload.spec.ts > should not stall on evaluate when dismissing beforeunload": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should isolate send cookie header": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set a cookie on a different domain": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-base-url.spec.ts > should be able to match a URL relative to its given URL with urlMatcher": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-cookies-third-party.spec.ts > third party non-partitioned cookies": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-cookies-third-party.spec.ts > same origin third party 'Partitioned;' cookie with different origin intermediate iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-cookies-third-party.spec.ts > should(not) block third party cookies - ephemeral context": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-cookies.spec.ts > should properly report \"Strict\" sameSite cookie": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-cookies.spec.ts > should support requestStorageAccess": {
    "previous": "failed",
    "current": "skipped"
  },
  "library/browsercontext-credentials.spec.ts > should fail without credentials": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-credentials.spec.ts > should fail with correct credentials and mismatching scheme": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-credentials.spec.ts > should fail with correct credentials and mismatching hostname": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-credentials.spec.ts > should fail with correct credentials and mismatching port": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-fetch.spec.ts > should work with connectOverCDP": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/browsercontext-fetch.spec.ts > should support set-cookie with SameSite and without Secure attribute over HTTP": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > should update har.zip for context": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should ignore boundary when matching multipart/form-data body": {
    "previous": "timedOut",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > should update har.zip for page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should update extracted har.zip for page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > context.unrouteAll should stop context.routeFromHAR": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-locale.spec.ts > should format date": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-locale.spec.ts > should format number in popups": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-page-event.spec.ts > should work with Shift-clicking": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-pages.spec.ts > should return bounding box with page scale": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-proxy.spec.ts > should use socks proxy in second page": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-timezone-id.spec.ts > should affect Intl.DateTimeFormat().resolvedOptions().timeZone": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-user-agent.spec.ts > should work for navigator.userAgentData and sec-ch-ua headers": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/browsercontext-viewport-mobile.spec.ts > mobile viewport > should scroll when emulating a mobile viewport": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsertype-basic.spec.ts > browserType.executablePath should work": {
    "previous": "passed",
    "current": "skipped"
  },
  "library/browsertype-basic.spec.ts > should throw when trying to connect with not-chromium": {
    "previous": "passed",
    "current": "skipped"
  },
  "library/browsertype-connect.spec.ts > run-server > should be able to reconnect to a browser": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsertype-connect.spec.ts > run-server > socks proxy > should lead to the error page for forwarded requests when the connection is refused": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > should respect CSP @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > should play audio @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > should not crash on showDirectoryPicker": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/capabilities.spec.ts > should not crash on storage.getDirectory()": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > service worker should register in an iframe": {
    "previous": "passed",
    "current": "failed"
  },
  "library/channels.spec.ts > should scope CDPSession handles": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/chromium/connect-over-cdp.spec.ts > should keep URL parameters when adding json/version": {
    "previous": "timedOut",
    "current": "passed"
  },
  "library/chromium/connect-over-cdp.spec.ts > should append /json/version with a slash if there isnt one": {
    "previous": "timedOut",
    "current": "passed"
  },
  "library/chromium/connect-over-cdp.spec.ts > should report an expected error when the endpointURL returns a non-expected status code": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/connect-over-cdp.spec.ts > should report an expected error when the endpoint URL JSON webSocketDebuggerUrl is undefined": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/connect-over-cdp.spec.ts > should print custom ws close error": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/disable-web-security.spec.ts > test init script w/ --disable-web-security": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/launcher.spec.ts > should open devtools when \"devtools: true\" option is given": {
    "previous": "timedOut",
    "current": "skipped"
  },
  "library/chromium/oopif.spec.ts > should report oopif frames": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should expose function": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should respect route": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should load oopif iframes with subresources and route": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should report main requests": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should support exposeFunction": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should support addInitScript": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should click a button when it overlays oopif": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should report google.com frame with headed": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should click": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > contentFrame should work": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should be able to click in iframe": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should not throw on exposeFunction when oopif detaches": {
    "previous": "passed",
    "current": "failed"
  },
  "library/client-certificates.spec.ts > browser > support http2 if the browser only supports http1.1": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/defaultbrowsercontext-2.spec.ts > coverage should work": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "library/download.spec.ts > download event > should close the context without awaiting the failed download": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/emulation-focus.spec.ts > should change document.activeElement": {
    "previous": "passed",
    "current": "failed"
  },
  "library/emulation-focus.spec.ts > should not affect screenshots": {
    "previous": "failed",
    "current": "skipped"
  },
  "library/har.spec.ts > should have browser": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should include query params": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should calculate time": {
    "previous": "passed",
    "current": "failed"
  },
  "library/headful.spec.ts > should not override viewport size when passed null": {
    "previous": "passed",
    "current": "failed"
  },
  "library/headful.spec.ts > should have the same hyphen rendering on headless and headed": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should click when element detaches in mousedown": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should block all events when hit target is wrong and element detaches": {
    "previous": "passed",
    "current": "failed"
  },
  "library/hit-target.spec.ts > should work with drag and drop that moves the element under cursor": {
    "previous": "passed",
    "current": "failed"
  },
  "library/hit-target.spec.ts > should work with block-block-block inside inline-inline": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should not click iframe overlaying the target": {
    "previous": "passed",
    "current": "failed"
  },
  "library/ignorehttpserrors.spec.ts > serviceWorker should intercept document request": {
    "previous": "failed",
    "current": "skipped"
  },
  "library/locator-generator.spec.ts >  > reverse engineer internal:has-text locators": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/multiclient.spec.ts > should not allow parallel js coverage and cleanup upon disconnect": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/multiclient.spec.ts > should not allow parallel css coverage": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/page-close.spec.ts > should not treat navigations as new popups": {
    "previous": "failed",
    "current": "passed"
  },
  "library/pdf.spec.ts > should be able to save file": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/pdf.spec.ts > should be able to generate outline": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/permissions.spec.ts > storage access": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/permissions.spec.ts >  > should be able to use the local-fonts API": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/popup.spec.ts > should not dispatch binding on a closed page": {
    "previous": "failed",
    "current": "passed"
  },
  "library/proxy.spec.ts > should use proxy for second page": {
    "previous": "failed",
    "current": "passed"
  },
  "library/proxy.spec.ts > should use socks proxy": {
    "previous": "failed",
    "current": "passed"
  },
  "library/proxy.spec.ts > should proxy local network requests > by default > link-local": {
    "previous": "failed",
    "current": "passed"
  },
  "library/resource-timing.spec.ts > should work for subresource": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > axe-core accessible-text": {
    "previous": "passed",
    "current": "failed"
  },
  "library/role-utils.spec.ts > svg role=presentation": {
    "previous": "failed",
    "current": "passed"
  },
  "library/route-web-socket.spec.ts > should emit close upon frame navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "library/route-web-socket.spec.ts > no-mock > should work with text message": {
    "previous": "passed",
    "current": "failed"
  },
  "library/route-web-socket.spec.ts > no-mock > should work when connection errors out": {
    "previous": "passed",
    "current": "failed"
  },
  "library/screenshot.spec.ts > page screenshot > should run in parallel in multiple pages": {
    "previous": "failed",
    "current": "skipped"
  },
  "library/screenshot.spec.ts > element screenshot > should work if the main resource hangs": {
    "previous": "timedOut",
    "current": "skipped"
  },
  "library/selector-generator.spec.ts > selector generator > should prefer button over inner span": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should prefer role=button over inner span": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should not prefer zero-sized button over inner span": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate text and normalize whitespace": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should not escape spaces inside named attr selectors": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate text for <input type=button>": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should trim text": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should try to improve role name": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should try to improve text": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should try to improve text by shortening": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should try to improve label text by shortening": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should not improve guid text": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should not escape text with >>": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should escape text with quote": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should escape text with slash": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should not use text for select": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should use ordinal for identical nodes": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should prefer data-testid": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should use data-testid in strict errors": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should handle first non-unique data-testid": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should handle second non-unique data-testid": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should use readable id": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should not use generated id": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should use internal:has-text": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should use internal:has-text with regexp": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should use internal:has-text with regexp with a quote": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should chain text after parent": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should use parent text": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should separate selectors by >>": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should trim long text": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should use nested ordinals": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should prefer class to ordinal": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should properly join child selectors under nested ordinals": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should not use input[value]": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should find text in shadow dom": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should match in shadow dom": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should match in deep shadow dom": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should work in dynamic iframes without navigation": {
    "previous": "failed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should use the name attributes for elements that can have it": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should work with tricky attributes": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should work without CSS.escape": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should not over-escape for CSS syntax": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should ignore empty aria-label for candidate consideration": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should accept valid aria-label for candidate consideration": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should ignore empty role for candidate consideration": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should not accept invalid role for candidate consideration": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should ignore empty data-test-id for candidate consideration": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should accept valid data-test-id for candidate consideration": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate label selector": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should prefer role other input[type]": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate title selector": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate exact text when necessary": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate exact title when necessary": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate exact placeholder when necessary": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate exact role when necessary": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate exact label when necessary": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate relative selector": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate multiple: noText in role": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate multiple: noText in text": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate multiple: noId": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should generate multiple: noId noText": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should prefer role with hasText to css with hasText": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should prioritize attributes correctly > role": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should prioritize attributes correctly > placeholder": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should prioritize attributes correctly > name": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/selector-generator.spec.ts > selector generator > should prioritize attributes correctly > type": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/trace-viewer.spec.ts > should show params and return value": {
    "previous": "failed",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show null as a param": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should have correct snapshot size": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should have correct stack trace": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should have network requests": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should filter network requests by resource type": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show font preview": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should filter network requests by url": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should have network request overrides": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should have network request overrides 2": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show snapshot URL": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should popup snapshot": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should capture iframe with sandbox attribute": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should capture data-url svg iframe": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should contain adopted style sheets": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should work with adopted style sheets and replace/replaceSync": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should work with nesting CSS selectors": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should restore scroll positions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should restore control values": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should work with meta CSP": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should handle multiple headers": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should handle src=blob": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should handle file URIs": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should preserve currentSrc": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should register custom elements": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should highlight target elements": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should highlight target element in shadow dom": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should highlight expect failure": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show action source": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should follow redirects": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should include metainfo": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open two trace files": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open two trace files of the same test (v6)": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not crash with broken locator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should serve overridden request": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should display waitForLoadState even if did not wait for it": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should display language-specific locators": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should pick locator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should update highlight when typing locator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should update highlight when typing snapshot": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open trace-1.31": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open trace-1.37": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should prefer later resource request with the same method": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should ignore 304 responses": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should pick locator in iframe": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should highlight locator in iframe while typing": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should preserve noscript when javascript is disabled": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should remove noscript by default": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should remove noscript when javaScriptEnabled is set to true": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open snapshot in new browser context": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should show similar actions from legacy library-only trace": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show correct request start time": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not record route actions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not record network actions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show baseURL in metadata pane": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not leak recorders": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > canvas disabled title": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > canvas clipping": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "library/trace-viewer.spec.ts > canvas clipping in iframe": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "library/trace-viewer.spec.ts > should show only one pointer with multilevel iframes": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show a popover": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show a modal dialog": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open settings dialog": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should toggle theme color": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should toggle canvas rendering": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should render blob trace received from message": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > shouldn't render not-blob trace received from message": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not trip over complex urls in style tags": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should render locator descriptions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should load trace from HTTP with progress indicator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should filter actions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts >  > should handle failed snapshots due to dialog": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/tracing.spec.ts > should produce screencast frames fit": {
    "previous": "failed",
    "current": "skipped"
  },
  "library/tracing.spec.ts > should produce screencast frames crop": {
    "previous": "failed",
    "current": "skipped"
  },
  "library/tracing.spec.ts > should produce screencast frames scale": {
    "previous": "failed",
    "current": "skipped"
  },
  "library/video.spec.ts > screencast > should scale frames down to the requested size ": {
    "previous": "failed",
    "current": "skipped"
  },
  "library/video.spec.ts > screencast > should capture full viewport": {
    "previous": "failed",
    "current": "skipped"
  },
  "library/video.spec.ts > screencast > should capture full viewport on hidpi": {
    "previous": "failed",
    "current": "skipped"
  },
  "library/video.spec.ts > screencast > should work with video+trace": {
    "previous": "failed",
    "current": "skipped"
  },
  "page/elementhandle-click.spec.ts > should double click the button": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-content-frame.spec.ts > should work for cross-process iframes": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-content-frame.spec.ts > should return null for document.documentElement": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-convenience.spec.ts > getAttribute should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-convenience.spec.ts > innerText should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-misc.spec.ts > should hover": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-misc.spec.ts > should fill input when Node is removed": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for iframe elements": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for cross-frame evaluations": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-select-text.spec.ts > should select input": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-select-text.spec.ts > should timeout waiting for invisible element": {
    "previous": "failed",
    "current": "passed"
  },
  "page/expect-boolean.spec.ts > toBeAttached > over navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-evaluate.spec.ts > should have correct execution contexts @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-evaluate.spec.ts > should work in iframes that interrupted initial javascript url navigation": {
    "previous": "passed",
    "current": "skipped"
  },
  "page/frame-evaluate.spec.ts > evaluateHandle should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-frame-element.spec.ts > should work with contentFrame": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-goto.spec.ts > should return matching responses": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-hierarchy.spec.ts > should detach child frames on navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-convenience.spec.ts > inputValue should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-convenience.spec.ts > innerHTML should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-convenience.spec.ts > textContent should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-convenience.spec.ts > should return page": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-element-handle.spec.ts > should query existing element @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-misc-1.spec.ts > should select single option": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should work with a custom check": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should work with times: option": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should wait for hidden by default": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should work with noWaitAfter": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-script-tag.spec.ts > should throw an error if loading from url fail": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-script-tag.spec.ts > should include sourceURL when path is provided": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-script-tag.spec.ts > should throw a nice error when the request fails": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-style-tag.spec.ts > should throw an error if loading from url fail": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-aria-snapshot-ai.spec.ts > should stitch all frame snapshots": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-aria-snapshot.spec.ts > should include pseudo codepoints": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-basic.spec.ts > should work with goto following click": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-no-hang.spec.ts > assigning location to about:blank": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-no-hang.spec.ts > calling window.open and window.close": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-no-hang.spec.ts > goBack in the middle of navigation that commits": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-basic.spec.ts > page.url should include hashes": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-basic.spec.ts > should have sane user agent": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click-react.spec.ts > should not retarget when element changes on hover": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click-scroll.spec.ts > should scroll into view display:contents with position": {
    "previous": "failed",
    "current": "skipped"
  },
  "page/page-click-timeout-3.spec.ts > should report wrong hit target subtree": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click-timeout-4.spec.ts > should timeout waiting for stable position": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click the button after navigation ": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click the button after a cross origin navigation ": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should not wait with force": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click on checkbox input and toggle": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should scroll and click the button with smooth scroll behavior": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should double click the button": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click the button inside an iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click a very large button with offset": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > trial run should not double click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should fail when obscured and not waiting for hit target": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should report nice error when element is detached and force-clicked": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click the button when window.innerWidth is corrupted": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should retry when navigating during the click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should fire contextmenu event on right click in correct order": {
    "previous": "failed",
    "current": "skipped"
  },
  "page/page-dispatchevent.spec.ts > should dispatch click event properties": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch click after navigation ": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch drag drop events": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch drag drop events via ElementHandles": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch wheel event": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch absolute device orientation event": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-drag.spec.ts > Drag and drop > should not send dragover on the first mousemove": {
    "previous": "skipped",
    "current": "failed"
  },
  "page/page-drag.spec.ts > Drag and drop > should work if the drag event is captured but not canceled": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-evaluate.spec.ts > should work right after a cross-origin navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-evaluate.spec.ts > should work with overridden Object.defineProperty": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-evaluate.spec.ts > should work with overridden globalThis.Window/Document/Node": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-network.spec.ts > Page.Events.RequestFailed @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-network.spec.ts > should support redirects": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-popup.spec.ts > should work with fake-clicking target=_blank and rel=noopener": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-popup.spec.ts > should work with clicking target=_blank and rel=noopener": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-request.spec.ts > should report navigation requests and responses handled by service worker": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-request.spec.ts > should fire requestfailed when intercepting race": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "page/page-event-request.spec.ts > should finish 204 request": {
    "previous": "passed",
    "current": "skipped"
  },
  "page/page-expose-function.spec.ts > exposeBindingHandle should not throw during navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should throw on unsupported inputs": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should fill different input types": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - color": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - month": {
    "previous": "skipped",
    "current": "passed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - week": {
    "previous": "skipped",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should throw on incorrect month": {
    "previous": "skipped",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should throw on incorrect week": {
    "previous": "skipped",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should throw on incorrect datetime-local": {
    "previous": "skipped",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should fill contenteditable with new lines": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should retry on readonly element": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-focus.spec.ts > clicking checkbox should activate it": {
    "previous": "skipped",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should use http for no protocol": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should work cross-process": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should work with cross-process that fails before committing": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should fail when server returns 204": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should fail when navigating to bad url": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should fail when navigating to bad SSL": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should fail when navigating to bad SSL after redirects": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should fail when main resources failed to load": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > js redirect overrides url bar navigation ": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should properly wait for load": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should not resolve goto upon window.stop()": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-history.spec.ts > page.reload should work with cross-origin redirect": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should press shift plus": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should handle selectAll": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should work with keyboard events with empty.html": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should dispatch insertText after context menu was opened": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should have correct Keydown/Keyup order when pressing Escape key": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-mouse.spec.ts > should set modifier keys on click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-navigation.spec.ts > should work with _blank target": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-navigation.spec.ts > should work with cross-process _blank target": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-network-idle.spec.ts > should wait for networkidle in setContent": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-request.spec.ts > should handle mixed-content blocked requests": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "page/page-network-response.spec.ts > should provide a Response with a file URL": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-sizes.spec.ts > should have correct responseBodySize for 404 with content": {
    "previous": "passed",
    "current": "skipped"
  },
  "page/page-network-sizes.spec.ts > should return sizes without hanging": {
    "previous": "passed",
    "current": "skipped"
  },
  "page/page-request-continue.spec.ts > should not allow to override unsafe HTTP headers": {
    "previous": "timedOut",
    "current": "failed"
  },
  "page/page-route.spec.ts > should not auto-intercept non-preflight OPTIONS with network interception": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should fire transitionend for finite transitions": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should not change animation with playbackRate equal to 0": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-set-input-files.spec.ts > should detect mime type": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-function.spec.ts > should survive cross-process navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should throw for bad state": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-load-state.spec.ts > should work with pages that have loaded before being connected to": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should work for frame": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-load-state.spec.ts > should work with broken data-url iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with commit": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with clicking on anchor links": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with clicking on links which do not commit navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with DOM history.back()/history.forward()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-navigation.spec.ts > should work on frame": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-response.spec.ts > should work with async predicate": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-response.spec.ts > should work with re-rendered cached IMG elements": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-1.spec.ts > should tolerate waitFor=visible": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > should report logs while waiting for visible": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > should report logs when the selector resolves to multiple elements": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-2.spec.ts > should support >> selector syntax": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-url.spec.ts > should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-url.spec.ts > should work with clicking on anchor links": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-url.spec.ts > should work with DOM history.back()/history.forward()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-url.spec.ts > should work on frame": {
    "previous": "passed",
    "current": "failed"
  },
  "page/selectors-css.spec.ts > should work for open shadow roots": {
    "previous": "passed",
    "current": "failed"
  },
  "page/selectors-css.spec.ts > should work with comma separated list": {
    "previous": "failed",
    "current": "passed"
  },
  "page/selectors-css.spec.ts > should work with :nth-child": {
    "previous": "passed",
    "current": "failed"
  },
  "page/selectors-css.spec.ts > should work with :is": {
    "previous": "passed",
    "current": "failed"
  },
  "page/selectors-css.spec.ts > should work with :has": {
    "previous": "failed",
    "current": "passed"
  },
  "page/workers.spec.ts > should report worker script as network request after redirect": {
    "previous": "failed",
    "current": "skipped"
  },
  "library/beforeunload.spec.ts > should support dismissing the dialog multiple times": {
    "current": "passed"
  },
  "library/beforeunload.spec.ts > should support closing the page after a previous dismiss": {
    "current": "passed"
  },
  "library/beforeunload.spec.ts > should support closing the page via a subsequent onbeforeunload dialog": {
    "current": "passed"
  },
  "library/fetch-proxy.spec.ts > should send correct ALPN protocol to HTTPS proxy": {
    "current": "skipped"
  },
  "page/page-expose-function.spec.ts > exposeBinding should work in parallel": {
    "current": "passed"
  }
}