{
  "library/browsertype-connect.spec.ts > launchServer > should save download": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/browsertype-connect.spec.ts > launchServer > should error when saving download after deletion": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/browsertype-connect.spec.ts > run-server > should save download": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/browsertype-connect.spec.ts > run-server > should error when saving download after deletion": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/browsertype-connect.spec.ts > launchServer only > should work with existing browser": {
    "previous": "passed"
  },
  "library/debug-controller.spec.ts > should allow setting recorder mode only for specific browser": {
    "previous": "failed"
  },
  "library/debug-controller.spec.ts > should work with browser._launchServer": {
    "previous": "passed"
  },
  "library/debug-controller.spec.ts > should not work with browser._launchServer(_debugController: false)": {
    "previous": "passed"
  },
  "library/debug-controller.spec.ts > should support closing browsers": {
    "previous": "passed"
  },
  "library/defaultbrowsercontext-1.spec.ts > should support acceptDownloads option": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > should be able to download a PDF file": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > should be able to download a inline PDF file via response interception": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > should be able to download a inline PDF file via navigation": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "library/download.spec.ts > should save to user-specified path": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > should download even if there is no \"attachment\" value": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/download.spec.ts > should convert navigation to a resource with unsupported mime type into download": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/download.spec.ts > should download links with data url": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/download.spec.ts > should download successfully when routing": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should report download when navigation turns into download @smoke": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should work with Cross-Origin-Opener-Policy": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should report downloads with acceptDownloads: false": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/download.spec.ts > download event > should report downloads with acceptDownloads: true": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should report proper download url when download is from download attribute": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/download.spec.ts > download event > should report downloads for download attribute": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should save to user-specified path without updating original path": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should save to two different paths with multiple saveAs calls": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should save to overwritten filepath": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should create subdirectories when saving to non-existent user-specified path": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should error when saving with downloads disabled": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/download.spec.ts > download event > should error when saving after deletion": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/download.spec.ts > download event > should report non-navigation downloads": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should report download path within page.on('download', …) handler for Files": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should report download path within page.on('download', …) handler for Blobs": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "library/download.spec.ts > download event > should report alt-click downloads": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "library/download.spec.ts > download event > should report new window downloads": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "library/download.spec.ts > download event > should delete file": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should expose stream": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should delete downloads on context destruction": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should delete downloads on browser gone": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should close the context without awaiting the download": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/download.spec.ts > download event > should throw if browser dies": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/download.spec.ts > download event > should download large binary.zip": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should be able to cancel pending downloads": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "library/download.spec.ts > download event > should not fail explicitly to cancel a download even if that is already finished": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should report downloads with interception": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/download.spec.ts > download event > should emit download event from nested iframes": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/downloads-path.spec.ts > downloads path > should keep downloadsPath folder": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/downloads-path.spec.ts > downloads path > should delete downloads when context closes": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/downloads-path.spec.ts > downloads path > should report downloads in downloadsPath folder": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/downloads-path.spec.ts > downloads path > should report downloads in downloadsPath folder with a relative path": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/downloads-path.spec.ts > downloads path > should accept downloads in persistent context": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/downloads-path.spec.ts > downloads path > should delete downloads when persistent context closes": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/emulation-focus.spec.ts > should not affect screenshots": {
    "previous": "passed",
    "current": "failed"
  },
  "library/popup.spec.ts > BrowserContext.addInitScript should apply to a cross-process popup": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > regression test for issue 20791": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should wait for fonts to load": {
    "previous": "failed",
    "current": "passed"
  }
}