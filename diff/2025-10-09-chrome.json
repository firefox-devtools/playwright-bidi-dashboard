{
  "library/beforeunload.spec.ts > should close browsercontext with beforeunload page": {
    "previous": "failed",
    "current": "passed"
  },
  "library/beforeunload.spec.ts > should be able to navigate away from page with beforeunload": {
    "previous": "passed",
    "current": "failed"
  },
  "library/beforeunload.spec.ts > should close page with beforeunload listener": {
    "previous": "failed",
    "current": "passed"
  },
  "library/beforeunload.spec.ts > should not stall on click when dismissing beforeunload": {
    "previous": "failed",
    "current": "passed"
  },
  "library/beforeunload.spec.ts > should support closing the page after a previous dismiss": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should isolate persistent cookies": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set a cookie with a path": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set a cookie on a different domain": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-basic.spec.ts > should not report frameless pages on error": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-cookies-third-party.spec.ts > third party non-partitioned cookies": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > should produce extracted zip": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should update har.zip for page": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > should update extracted har.zip for page": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > context.unrouteAll should stop context.routeFromHAR": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-locale.spec.ts > should format date": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-locale.spec.ts > should work for multiple pages sharing same process": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-locale.spec.ts > should affect Intl.DateTimeFormat().resolvedOptions().locale": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-page-event.spec.ts > should work with Shift-clicking": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-proxy.spec.ts > should use socks proxy": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-viewport-mobile.spec.ts > mobile viewport > should scroll when emulating a mobile viewport": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > should play audio @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > navigator.clipboard should be present": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > requestFullscreen": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > should send no Content-Length header for GET requests with a Content-Type": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/disable-web-security.spec.ts > test init script w/ --disable-web-security": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should have version and creator": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should include response": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should omit content legacy": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should filter by regexp": {
    "previous": "passed",
    "current": "failed"
  },
  "library/headful.spec.ts > should not override viewport size when passed null": {
    "previous": "passed",
    "current": "failed"
  },
  "library/hit-target.spec.ts > should block all events when hit target is wrong and element detaches": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should work with mui select": {
    "previous": "passed",
    "current": "failed"
  },
  "library/multiclient.spec.ts > should unroute websockets": {
    "previous": "passed",
    "current": "failed"
  },
  "library/multiclient.spec.ts > should remove init scripts upon disconnect": {
    "previous": "passed",
    "current": "failed"
  },
  "library/popup.spec.ts > should not dispatch binding on a closed page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should use proxy @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should exclude patterns": {
    "previous": "failed",
    "current": "passed"
  },
  "library/proxy.spec.ts > should use socks proxy in second page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should proxy local network requests > with other bypasses > loopback address": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should proxy local network requests > with other bypasses > link-local": {
    "previous": "failed",
    "current": "passed"
  },
  "library/resource-timing.spec.ts > should work for subresource": {
    "previous": "passed",
    "current": "failed"
  },
  "library/role-utils.spec.ts > wpt accname non-manual": {
    "previous": "passed",
    "current": "failed"
  },
  "library/role-utils.spec.ts > svg role=presentation": {
    "previous": "failed",
    "current": "passed"
  },
  "library/route-web-socket.spec.ts > no-mock > should work with binaryType=blob": {
    "previous": "failed",
    "current": "passed"
  },
  "library/route-web-socket.spec.ts > no-mock > should pass through the required protocol": {
    "previous": "failed",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show params and return value": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show null as a param": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should have correct snapshot size": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should have correct stack trace": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should have network requests": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should filter network requests by resource type": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show font preview": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should filter network requests by url": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should have network request overrides": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should have network request overrides 2": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show snapshot URL": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should popup snapshot": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should capture iframe with sandbox attribute": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should capture data-url svg iframe": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should contain adopted style sheets": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should work with adopted style sheets and replace/replaceSync": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should work with nesting CSS selectors": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should restore scroll positions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should restore control values": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should work with meta CSP": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should handle multiple headers": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should handle src=blob": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should handle file URIs": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should preserve currentSrc": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should register custom elements": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should highlight target elements": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should highlight target element in shadow dom": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should highlight expect failure": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show action source": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should follow redirects": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should include metainfo": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open v6 trace file": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not crash with broken locator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should serve overridden request": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should display waitForLoadState even if did not wait for it": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should display language-specific locators": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should pick locator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should update highlight when typing locator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should update highlight when typing snapshot": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open trace-1.31": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open trace-1.37": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should prefer later resource request with the same method": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should ignore 304 responses": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should pick locator in iframe": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should highlight locator in iframe while typing": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should preserve noscript when javascript is disabled": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should remove noscript by default": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should remove noscript when javaScriptEnabled is set to true": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open snapshot in new browser context": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show similar actions from legacy library-only trace": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show correct request start time": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not record route actions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not record network actions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show baseURL in metadata pane": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not leak recorders": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > canvas disabled title": {
    "previous": "skipped",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > canvas clipping": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "library/trace-viewer.spec.ts > canvas clipping in iframe": {
    "previous": "skipped",
    "current": "timedOut"
  },
  "library/trace-viewer.spec.ts > should show only one pointer with multilevel iframes": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show a popover": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should show a modal dialog": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should open settings dialog": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should toggle theme color": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should toggle canvas rendering": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should render blob trace received from message": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > shouldn't render not-blob trace received from message": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should not trip over complex urls in style tags": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should render locator descriptions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should load trace from HTTP with progress indicator": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts > should filter actions": {
    "previous": "skipped",
    "current": "passed"
  },
  "library/trace-viewer.spec.ts >  > should handle failed snapshots due to dialog": {
    "previous": "skipped",
    "current": "passed"
  },
  "page/elementhandle-click.spec.ts > should work with Node removed": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-convenience.spec.ts > should have a nice preview for non-ascii attributes/children": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-convenience.spec.ts > getAttribute should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-misc.spec.ts > should select single option": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for cross-process iframes": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for detached elements": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-evaluate.spec.ts > should have different execution contexts": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-evaluate.spec.ts > should not allow cross-frame js handles": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-evaluate.spec.ts > evaluateHandle should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-frame-element.spec.ts > should work with frameset": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-goto.spec.ts > should continue after client redirect": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-convenience.spec.ts > getAttribute should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-convenience.spec.ts > should return page": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-misc-1.spec.ts > should fill input": {
    "previous": "passed",
    "current": "failed"
  },
  "page/matchers.misc.spec.ts > should outlive frame navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should work with a custom check": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should work with locator.hover()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should throw when handler times out": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should work with times: option": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should wait for hidden by default 2": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should work with noWaitAfter": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-script-tag.spec.ts > should work with a url and type=module": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-script-tag.spec.ts > should work with a path": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-style-tag.spec.ts > should throw an error if loading from url fail": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-style-tag.spec.ts > should work with a path": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-style-tag.spec.ts > should include sourceURL when path is provided": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-aria-snapshot-ai.spec.ts > should stitch all frame snapshots": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-aria-snapshot.spec.ts > should include pseudo codepoints": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-basic.spec.ts > should await navigation when clicking anchor": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-basic.spec.ts > should await form-post on click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-basic.spec.ts > should work with goto following click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-no-hang.spec.ts > clicking in the middle of navigation that commits": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-no-hang.spec.ts > goBack in the middle of navigation that commits": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-basic.spec.ts > page.url should include hashes": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click-react.spec.ts > should not retarget when element changes on hover": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click-timeout-2.spec.ts > should timeout waiting for display:none to be gone": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click-timeout-3.spec.ts > should still click when force but hit target is obscured": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click the button @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should not wait with force": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should waitFor visibility:hidden to be gone": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click wrapped links": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should scroll and click the button": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should scroll and click the button with smooth scroll behavior": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should double click the button": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click a rotated button": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should update modifiers correctly": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should report nice error when element is detached and force-clicked": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch click event @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch click after navigation ": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch drag drop events": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch wheel event": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-dispatchevent.spec.ts > should throw if argument is from different frame": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-drag.spec.ts > Drag and drop > should work if a frame is stalled": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-evaluate.spec.ts > should not throw an error when evaluation does a navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-evaluate.spec.ts > should work with new Function() and CSP": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-evaluate.spec.ts > should throw when frame is detached": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-evaluate.spec.ts > should work with overridden URL/Date/RegExp": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-network.spec.ts > should fire events in proper order": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-expose-function.spec.ts > should work on frames before navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-expose-function.spec.ts > exposeBindingHandle should not throw during navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should fill textarea @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - month": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should fill contenteditable with new lines": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should be able to clear using fill()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should work when navigating to valid url": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should navigate to URL with hash and fire requests without hash": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should be able to navigate to a page controlled by service worker": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > page.goBack should work @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-history.spec.ts > page.reload should work on a page with a hash at the end": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > page.goForward during renderer-initiated navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should not type canceled events": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should specify location": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should type emoji into an iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should handle selectAll": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should work with keyboard events with empty.html": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should work after a cross origin navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-mouse.spec.ts > should trigger hover state": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-mouse.spec.ts > should trigger hover state with removed window.Node": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-navigation.spec.ts > should work with _blank target": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-idle.spec.ts > should wait for networkidle to succeed navigation with request from previous navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-network-idle.spec.ts > should wait for networkidle in setContent from the child frame": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-response.spec.ts > should return multiple header value": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-request-continue.spec.ts > continue should drop content-length on redirects": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should not capture pseudo element css animation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should stop animations that happen right before screenshot": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should trigger particular events for css transitions": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-set-input-files.spec.ts > should throw when uploading a folder in a normal file upload input": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-function.spec.ts > should survive cross-process navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should resolve immediately if loaded": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should throw for bad state": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-load-state.spec.ts > should resolve immediately if load state matches": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should work with pages that have loaded before being connected to": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should wait for load state of popup with network url ": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with history.replaceState()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with DOM history.back()/history.forward()": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-navigation.spec.ts > should work for cross-process navigations": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-request.spec.ts > should work with no timeout": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-response.spec.ts > sync predicate should be only called once": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-1.spec.ts > should tolerate waitFor=visible": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > should resolve promise when node is added": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-1.spec.ts > should report logs while waiting for hidden": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > page.waitForSelector is shortcut for main frame": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-2.spec.ts > should support >> selector syntax": {
    "previous": "passed",
    "current": "failed"
  },
  "page/queryselector.spec.ts > should return empty array if nothing is found": {
    "previous": "passed",
    "current": "failed"
  }
}