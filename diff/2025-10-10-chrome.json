{
  "library/beforeunload.spec.ts > should support dismissing the dialog multiple times": {
    "previous": "passed",
    "current": "failed"
  },
  "library/beforeunload.spec.ts > should support closing the page via a subsequent onbeforeunload dialog": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-add-cookies.spec.ts > should isolate session cookies": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set a cookie with a path": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-init-script.spec.ts > should work with browser context scripts with a path": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-basic.spec.ts > window.open should use parent tab context": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-basic.spec.ts > should isolate localStorage and cookies @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-cookies-third-party.spec.ts > third party non-partitioned cookies": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should update har.zip for context": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > should ignore boundary when matching multipart/form-data body": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/browsercontext-har.spec.ts > should update extracted har.zip for page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > context.unrouteAll should stop context.routeFromHAR": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-locale.spec.ts > should format date": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-locale.spec.ts > should format number in popups": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-locale.spec.ts > should affect Intl.DateTimeFormat().resolvedOptions().locale": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-page-event.spec.ts > should work with Shift-clicking": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-proxy.spec.ts > should send secure cookies to subdomain.localhost": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-proxy.spec.ts > should use proxy for second page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-viewport-mobile.spec.ts > mobile viewport > should scroll when emulating a mobile viewport": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > should not crash on storage.getDirectory()": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > navigator.clipboard should be present": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > should send no Content-Length header for GET requests with a Content-Type": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > service worker should register in an iframe": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/disable-web-security.spec.ts > test init script w/ --disable-web-security": {
    "previous": "failed",
    "current": "passed"
  },
  "library/emulation-focus.spec.ts > should change focused iframe": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should include response": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should include query params": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should skip invalid Expires": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should omit content legacy": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should filter by regexp": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should calculate time": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should return receive time": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should not hang on resources served from cache": {
    "previous": "passed",
    "current": "failed"
  },
  "library/hit-target.spec.ts > should not click iframe overlaying the target": {
    "previous": "failed",
    "current": "passed"
  },
  "library/ignorehttpserrors.spec.ts > should work with mixed content": {
    "previous": "passed",
    "current": "failed"
  },
  "library/multiclient.spec.ts > should remove init scripts upon disconnect": {
    "previous": "failed",
    "current": "passed"
  },
  "library/page-close.spec.ts > should not treat navigations as new popups": {
    "previous": "passed",
    "current": "failed"
  },
  "library/popup.spec.ts > BrowserContext.addInitScript should apply to a cross-process popup": {
    "previous": "failed",
    "current": "passed"
  },
  "library/popup.spec.ts > should not dispatch binding on a closed page": {
    "previous": "failed",
    "current": "passed"
  },
  "library/proxy.spec.ts > should use proxy @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "library/proxy.spec.ts > should use proxy for second page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should proxy local network requests > by default > localhost": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should proxy local network requests > by default > loopback address": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > wpt accname #0": {
    "previous": "passed",
    "current": "failed"
  },
  "library/role-utils.spec.ts > wpt accname non-manual": {
    "previous": "failed",
    "current": "passed"
  },
  "library/route-web-socket.spec.ts > no-mock > should work with error after successful open": {
    "previous": "passed",
    "current": "failed"
  },
  "library/trace-viewer.spec.ts > should open snapshot in new browser context": {
    "previous": "passed",
    "current": "failed"
  },
  "library/unit/clock.spec.ts > works with concurrent runFor calls": {
    "previous": "passed"
  },
  "page/elementhandle-convenience.spec.ts > should have a nice preview for non-ascii attributes/children": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-convenience.spec.ts > getAttribute should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-convenience.spec.ts > innerText should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-convenience.spec.ts > textContent should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-misc.spec.ts > should hover": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-misc.spec.ts > should select single option": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-misc.spec.ts > should focus a button": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for document": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for detached elements": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-select-text.spec.ts > should wait for visible": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-wait-for-element-state.spec.ts > should wait for stable position": {
    "previous": "failed",
    "current": "passed"
  },
  "page/expect-boolean.spec.ts > toBeVisible > over navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/expect-boolean.spec.ts > toBeAttached > over navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-evaluate.spec.ts > should have different execution contexts": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-evaluate.spec.ts > should not allow cross-frame js handles": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-evaluate.spec.ts > evaluateHandle should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-goto.spec.ts > should continue after client redirect": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-hierarchy.spec.ts > should persist mainFrame on cross-process navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-hierarchy.spec.ts > should detach child frames on navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-hierarchy.spec.ts > should return frame.page()": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-convenience.spec.ts > getAttribute should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-convenience.spec.ts > innerText should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-convenience.spec.ts > should return page": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-misc-1.spec.ts > should hover when Node is removed": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-misc-1.spec.ts > should fill input": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-init-script.spec.ts > should work after a cross origin navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should not work with force:true": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should work with locator.waitFor": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should wait for hidden by default 2": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should work with noWaitAfter": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-script-tag.spec.ts > should work with a url and type=module": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-style-tag.spec.ts > should work with a path": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-style-tag.spec.ts > should work with content": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-aria-snapshot-ai.spec.ts > should stitch all frame snapshots": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-aria-snapshot.spec.ts > should include pseudo codepoints": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-basic.spec.ts > should await navigation when clicking anchor": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-no-hang.spec.ts > assigning location to about:blank": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-no-hang.spec.ts > clicking in the middle of navigation that aborts": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-no-hang.spec.ts > clicking in the middle of navigation that commits": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click-timeout-2.spec.ts > should timeout waiting for visibility:hidden to be gone": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click the button @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should select the text by triple clicking": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should waitFor visible when parent is hidden": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click wrapped links": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click the button with px border with offset": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > trial run should not click": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > trial run should not double click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should update modifiers correctly": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should report nice error when element is detached and force-clicked": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-drag.spec.ts > Drag and drop > should work if a frame is stalled": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-evaluate.spec.ts > should not throw an error when evaluation does a navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-evaluate.spec.ts > should throw when frame is detached": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-evaluate.spec.ts > should work with overridden globalThis.Window/Document/Node": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-evaluate.spec.ts > should work with overridden URL/Date/RegExp": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-popup.spec.ts > should emit for immediately closed popups 2": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-popup.spec.ts > should work with fake-clicking target=_blank and rel=noopener": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-expose-function.spec.ts > should work on frames": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should fill textarea @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should fill different input types": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - color": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should fill contenteditable": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should fill contenteditable with new lines": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should retry on invisible element": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should work cross-process": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should work when navigating to valid url": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should not leak listeners during navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should return from goto if new navigation is started": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should wait for load when iframe attaches and detaches": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-history.spec.ts > page.goBack should work @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > goBack/goForward should work with bfcache-able pages": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > page.reload should work on a page with a hash at the end": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should support plus-separated modifiers": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should handle selectAll": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should work with keyboard events with empty.html": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should dispatch insertText after context menu was opened": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should have correct Keydown/Keyup order when pressing Escape key": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-mouse.spec.ts > should select the text with mouse": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-mouse.spec.ts > should trigger hover state": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-navigation.spec.ts > should work with cross-process _blank target": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-network-idle.spec.ts > should wait for networkidle to succeed navigation with request from previous navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-idle.spec.ts > should wait for networkidle in setContent from the child frame": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-network-response.spec.ts > should return status text": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-request-continue.spec.ts > continue should drop content-length on redirects": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot > should work while navigating": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should not capture pseudo element css animation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should stop animations that happen right before screenshot": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should trigger particular events for INfinite css animation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-set-input-files.spec.ts > should throw when uploading a folder in a normal file upload input": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-function.spec.ts > should survive cross-process navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-function.spec.ts > should not be called after finishing successfully": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should resolve immediately if loaded": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-load-state.spec.ts > should resolve immediately if load state matches": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-load-state.spec.ts > should work with clicking target=_blank": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should resolve after popup load": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with clicking on anchor links": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with DOM history.back()/history.forward()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with url match": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-request.spec.ts > should work with predicate": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-request.spec.ts > should work with no timeout": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-response.spec.ts > should work with predicate": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > should tolerate waitFor=visible": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-1.spec.ts > page.waitForSelector is shortcut for main frame": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-2.spec.ts > should support >> selector syntax": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-url.spec.ts > should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-url.spec.ts > should work with DOM history.back()/history.forward()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-url.spec.ts > should work with url match for same document navigations": {
    "previous": "passed",
    "current": "failed"
  },
  "page/queryselector.spec.ts > should return empty array if nothing is found": {
    "previous": "failed",
    "current": "passed"
  },
  "library/unit/clock.spec.ts > fastForward > does not rewind back in time": {
    "current": "passed"
  },
  "library/unit/clock.spec.ts > fastForward > error does not break the clock": {
    "current": "passed"
  }
}