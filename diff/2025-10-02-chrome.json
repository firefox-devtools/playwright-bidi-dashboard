{
  "library/beforeunload.spec.ts > should close browsercontext with beforeunload page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/beforeunload.spec.ts > should be able to navigate away from page with beforeunload": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set a cookie on a different domain": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set cookies for a frame": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-add-init-script.spec.ts > should work with browser context scripts with a path": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-base-url.spec.ts > should construct the URLs correctly when a baseURL with a trailing slash in browser.newPage is passed to page.goto": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-base-url.spec.ts > should not construct a new URL when valid URLs are passed": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-fetch.spec.ts > should support cookie with empty value": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should round-trip extracted har.zip": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-locale.spec.ts > should work for multiple pages sharing same process": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-page-event.spec.ts > should work with Shift-clicking": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-proxy.spec.ts > should use proxy for second page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-proxy.spec.ts > should use socks proxy": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-viewport-mobile.spec.ts > mobile viewport > should scroll when emulating a mobile viewport": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsertype-connect.spec.ts > run-server > should be able to visit ipv6 through localhost": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsertype-connect.spec.ts > launchServer only > should work with existing browser": {
    "previous": "passed"
  },
  "library/capabilities.spec.ts > make sure that XMLHttpRequest upload events are emitted correctly": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > should be able to render avif images": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/disable-web-security.spec.ts > test init script w/ --disable-web-security": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/oopif.spec.ts > should report oopif frames": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/oopif.spec.ts > should expose function": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should respect route": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > contentFrame should work": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/oopif.spec.ts > should intercept response body from oopif": {
    "previous": "failed",
    "current": "passed"
  },
  "library/debug-controller.spec.ts > should allow setting recorder mode only for specific browser": {
    "previous": "failed"
  },
  "library/debug-controller.spec.ts > should reset routes before reuse": {
    "previous": "passed",
    "current": "failed"
  },
  "library/debug-controller.spec.ts > should work with browser._launchServer": {
    "previous": "passed"
  },
  "library/debug-controller.spec.ts > should not work with browser._launchServer(_debugController: false)": {
    "previous": "passed"
  },
  "library/debug-controller.spec.ts > should support closing browsers": {
    "previous": "passed"
  },
  "library/har.spec.ts > should include response": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should include query params": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should skip invalid Expires": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should omit content": {
    "previous": "failed",
    "current": "passed"
  },
  "library/har.spec.ts > should omit content legacy": {
    "previous": "passed",
    "current": "failed"
  },
  "library/headful.spec.ts > should not override viewport size when passed null": {
    "previous": "passed",
    "current": "failed"
  },
  "library/hit-target.spec.ts > should click when element detaches in mousedown": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should not block programmatic events": {
    "previous": "passed",
    "current": "failed"
  },
  "library/hit-target.spec.ts > should work with mui select": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should work with drag and drop that moves the element under cursor": {
    "previous": "passed",
    "current": "failed"
  },
  "library/hit-target.spec.ts > should not click iframe overlaying the target": {
    "previous": "passed",
    "current": "failed"
  },
  "library/multiclient.spec.ts > should remove init scripts upon disconnect": {
    "previous": "failed",
    "current": "passed"
  },
  "library/permissions.spec.ts > permissions > should prompt for geolocation permission when origin is not listed": {
    "previous": "failed",
    "current": "passed"
  },
  "library/popup.spec.ts > BrowserContext.addInitScript should apply to a cross-process popup": {
    "previous": "passed",
    "current": "failed"
  },
  "library/popup.spec.ts > should not dispatch binding on a closed page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should exclude patterns": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should proxy local network requests > by default > link-local": {
    "previous": "passed",
    "current": "failed"
  },
  "library/resource-timing.spec.ts > should work for subresource": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > axe-core implicit-role": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > svg role=presentation": {
    "previous": "passed",
    "current": "failed"
  },
  "library/route-web-socket.spec.ts > no-mock > should work with binaryType=blob": {
    "previous": "failed",
    "current": "passed"
  },
  "library/route-web-socket.spec.ts > no-mock > should pass through the required protocol": {
    "previous": "passed",
    "current": "failed"
  },
  "library/signals.spec.ts > signals > should close the browser on SIGINT": {
    "previous": "timedOut",
    "current": "passed"
  },
  "library/signals.spec.ts > signals > should kill the browser on double SIGINT and remove temp dir": {
    "previous": "passed",
    "current": "timedOut"
  },
  "library/tracing.spec.ts > should ignore iframes in head": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-content-frame.spec.ts > should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-content-frame.spec.ts > should return null for document.documentElement": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-convenience.spec.ts > should have a nice preview for non-ascii attributes/children": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-convenience.spec.ts > innerHTML should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-convenience.spec.ts > innerText should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-misc.spec.ts > should fill input": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-misc.spec.ts > should fill input when Node is removed": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-misc.spec.ts > should focus a button": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for detached elements": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for adopted elements": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-query-selector.spec.ts > should query existing element": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-screenshot.spec.ts > element screenshot > path option should create subdirectories": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-select-text.spec.ts > should select input": {
    "previous": "failed",
    "current": "passed"
  },
  "page/eval-on-selector.spec.ts > should support spaces with >> syntax": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-evaluate.spec.ts > should have different execution contexts": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-evaluate.spec.ts > should execute after cross-site navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-frame-element.spec.ts > should work with frameset": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-goto.spec.ts > should reject when frame detaches": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-convenience.spec.ts > innerHTML should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-convenience.spec.ts > innerText should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-misc-1.spec.ts > should fill input when Node is removed": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-misc-1.spec.ts > should dispatch click event via ElementHandles": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-init-script.spec.ts > should work after a cross origin navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should work with a custom check": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should work with locator.hover()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should throw when handler times out": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should work with times: option": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-script-tag.spec.ts > should throw an error if loading from url fail": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-style-tag.spec.ts > should work with a url @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-aria-snapshot-ai.spec.ts > should stitch all frame snapshots": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-aria-snapshot-ai.spec.ts > should auto-wait for navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-basic.spec.ts > should work with goto following click": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-no-hang.spec.ts > clicking on links which do not commit navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-no-hang.spec.ts > calling window.open and window.close": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-no-hang.spec.ts > clicking in the middle of navigation that aborts": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-basic.spec.ts > page.url should include hashes": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click-react.spec.ts > should not retarget when element changes on hover": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click-react.spec.ts > should not retarget when element is recycled on hover": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click-timeout-2.spec.ts > should timeout waiting for visibility:hidden to be gone": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click-timeout-4.spec.ts > should click for the second time after first timeout": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should select the text by triple clicking": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click offscreen buttons": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should waitFor visible when parent is hidden": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should scroll and click the button": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click a partially obscured button": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click the button inside an iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click a very large button with offset": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should wait for stable position": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > trial run should not click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should update modifiers correctly": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should fail when element detaches after animation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should retry when navigating during the click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch click event properties": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch drag drop events": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should throw if argument is from different frame": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-evaluate.spec.ts > should work with CSP": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-evaluate.spec.ts > should work with busted Array.prototype.map/push": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-load.spec.ts > should fire once with iframe navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-network.spec.ts > Page.Events.RequestFailed @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-network.spec.ts > should support redirects": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-popup.spec.ts > should work with window features": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-popup.spec.ts > should emit for immediately closed popups 2": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-event-popup.spec.ts > should work with fake-clicking target=_blank and rel=noopener": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-expose-function.spec.ts > should work on frames before navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should fill textarea @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - color": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - time": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - range": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > should retry on readonly element": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should be able to clear using fill()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should fail when replaced by another navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should work when navigating to 404": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should navigate to URL with hash and fire requests without hash": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should return url with basic auth info": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > page.reload during renderer-initiated navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > page.reload should work with cross-origin redirect": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-history.spec.ts > page.goForward during renderer-initiated navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > should reload proper page": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should move with the arrow keys": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should not type canceled events": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should type all kinds of characters": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should have correct Keydown/Keyup order when pressing Escape key": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-mouse.spec.ts > should select the text with mouse": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-mouse.spec.ts > should set modifier keys on click": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-idle.spec.ts > should wait for networkidle when navigating iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-response.spec.ts > should return multiple header value": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-sizes.spec.ts > should return sizes without hanging": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should trigger particular events for INfinite css animation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-set-input-files.spec.ts > should upload a folder and throw for multiple directories": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-set-input-files.spec.ts > should throw when uploading a folder in a normal file upload input": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-function.spec.ts > should not be called after finishing successfully": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-load-state.spec.ts > should work with pages that have loaded before being connected to": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with commit": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-request.spec.ts > should work with no timeout": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-response.spec.ts > should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-response.spec.ts > should work with predicate": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-response.spec.ts > should work with re-rendered cached IMG elements": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-1.spec.ts > should resolve promise when node is added": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > should report logs while waiting for hidden": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-1.spec.ts > should report logs when the selector resolves to multiple elements": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-url.spec.ts > should work with url match for same document navigations": {
    "previous": "passed",
    "current": "failed"
  },
  "page/selectors-css.spec.ts > should work with comma separated list": {
    "previous": "passed",
    "current": "failed"
  },
  "page/selectors-css.spec.ts > should work with :scope": {
    "previous": "passed",
    "current": "failed"
  }
}