{
  "library/browsercontext-add-cookies.spec.ts > should isolate session cookies": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-add-cookies.spec.ts > should isolate persistent cookies": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-add-cookies.spec.ts > should isolate send cookie header": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-add-cookies.spec.ts > should be able to set unsecure cookie for HTTP website": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-add-cookies.spec.ts > should set a cookie on a different domain": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-base-url.spec.ts > should construct the URLs correctly when a baseURL with a trailing slash in browser.newPage is passed to page.goto": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-basic.spec.ts > window.open should use parent tab context": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-basic.spec.ts > should isolate localStorage and cookies @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-cookies-third-party.spec.ts > same origin third party 'Partitioned;' cookie with different origin intermediate iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-cookies.spec.ts > should properly report \"Strict\" sameSite cookie": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should round-trip har.zip": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should produce extracted zip": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > should update har.zip for context": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-har.spec.ts > should ignore boundary when matching multipart/form-data body": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-har.spec.ts > should update har.zip for page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-locale.spec.ts > should format date": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-locale.spec.ts > should work for multiple pages sharing same process": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-page-event.spec.ts > should work with Shift-clicking": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-pages.spec.ts > should return bounding box with page scale": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-proxy.spec.ts > should use proxy twice": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-proxy.spec.ts > should use socks proxy in second page": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-reuse.spec.ts > reuse launch > should reset serviceworker": {
    "previous": "passed",
    "current": "failed"
  },
  "library/browsercontext-reuse.spec.ts > reuse launch > should reset serviceworker that hangs in importScripts": {
    "previous": "failed",
    "current": "passed"
  },
  "library/browsercontext-viewport.spec.ts > should be able to get correct orientation angle on non-mobile devices": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > should play audio @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > navigator.clipboard should be present": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > loading in HTMLImageElement.prototype": {
    "previous": "failed",
    "current": "passed"
  },
  "library/capabilities.spec.ts > window.GestureEvent in WebKit": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > Intl.ListFormat should work": {
    "previous": "passed",
    "current": "failed"
  },
  "library/capabilities.spec.ts > service worker should register in an iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "library/channels.spec.ts > should not generate dispatchers for subresources w/o listeners": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/disable-web-security.spec.ts > test init script w/ --disable-web-security": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should expose function": {
    "previous": "passed",
    "current": "failed"
  },
  "library/chromium/oopif.spec.ts > should respect route": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/oopif.spec.ts > contentFrame should work": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/oopif.spec.ts > should be able to click in iframe": {
    "previous": "failed",
    "current": "passed"
  },
  "library/chromium/oopif.spec.ts > should not throw on exposeFunction when oopif detaches": {
    "previous": "passed",
    "current": "failed"
  },
  "library/debug-controller.spec.ts > should reset routes before reuse": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should include query params": {
    "previous": "passed",
    "current": "failed"
  },
  "library/har.spec.ts > should return receive time": {
    "previous": "passed",
    "current": "failed"
  },
  "library/headful.spec.ts > should not block third party SameSite=None cookies": {
    "previous": "failed",
    "current": "passed"
  },
  "library/hit-target.spec.ts > should work with drag and drop that moves the element under cursor": {
    "previous": "passed",
    "current": "failed"
  },
  "library/hit-target.spec.ts > should work with block-block-block inside inline-inline": {
    "previous": "failed",
    "current": "passed"
  },
  "library/multiclient.spec.ts > should remove exposed bindings upon disconnect": {
    "previous": "passed",
    "current": "failed"
  },
  "library/multiclient.spec.ts > should unroute websockets": {
    "previous": "passed",
    "current": "failed"
  },
  "library/multiclient.spec.ts > should remove locator handlers upon disconnect": {
    "previous": "passed",
    "current": "failed"
  },
  "library/page-close.spec.ts > should not treat navigations as new popups": {
    "previous": "passed",
    "current": "failed"
  },
  "library/popup.spec.ts > should expose function from browser context": {
    "previous": "failed",
    "current": "passed"
  },
  "library/popup.spec.ts > should not throttle rAF in the opener page": {
    "previous": "failed",
    "current": "timedOut"
  },
  "library/proxy.spec.ts > should use proxy @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "library/proxy.spec.ts > should use proxy for second page": {
    "previous": "failed",
    "current": "passed"
  },
  "library/proxy.spec.ts > should work with IP:PORT notion": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should use socks proxy": {
    "previous": "failed",
    "current": "passed"
  },
  "library/proxy.spec.ts > should use SOCKS proxy for websocket requests": {
    "previous": "passed",
    "current": "failed"
  },
  "library/proxy.spec.ts > should proxy local network requests > by default > localhost": {
    "previous": "failed",
    "current": "passed"
  },
  "library/proxy.spec.ts > should proxy local network requests > with other bypasses > loopback address": {
    "previous": "failed",
    "current": "passed"
  },
  "library/resource-timing.spec.ts > should work for subresource": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > wpt accname #0": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > wpt accname #1": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > wpt accname non-manual": {
    "previous": "failed",
    "current": "passed"
  },
  "library/role-utils.spec.ts > svg role=presentation": {
    "previous": "failed",
    "current": "passed"
  },
  "library/route-web-socket.spec.ts > no-mock > should work with client-side close": {
    "previous": "failed",
    "current": "passed"
  },
  "library/route-web-socket.spec.ts > no-mock > should pass through the required protocol": {
    "previous": "passed",
    "current": "failed"
  },
  "library/signals.spec.ts > signals > should close the browser on SIGHUP": {
    "previous": "timedOut",
    "current": "passed"
  },
  "library/tracing.spec.ts > should respect tracesDir and name": {
    "previous": "passed",
    "current": "failed"
  },
  "library/tracing.spec.ts > should ignore iframes in head": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-click.spec.ts > should work with Node removed": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-click.spec.ts > should work for Shadow DOM v1": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-click.spec.ts > should double click the button": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-convenience.spec.ts > inputValue should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-misc.spec.ts > should hover": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-misc.spec.ts > should select single option": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-misc.spec.ts > should focus a button": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for cross-process iframes": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for document": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-owner-frame.spec.ts > should work for detached elements": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-query-selector.spec.ts > should query existing element": {
    "previous": "passed",
    "current": "failed"
  },
  "page/elementhandle-screenshot.spec.ts > element screenshot > should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/elementhandle-select-text.spec.ts > should select plain div": {
    "previous": "failed",
    "current": "passed"
  },
  "page/expect-boolean.spec.ts > toBeVisible > over navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/expect-boolean.spec.ts > toBeAttached > over navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-evaluate.spec.ts > should have different execution contexts": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-frame-element.spec.ts > should work @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-frame-element.spec.ts > should work with contentFrame": {
    "previous": "passed",
    "current": "failed"
  },
  "page/frame-goto.spec.ts > should continue after client redirect": {
    "previous": "failed",
    "current": "passed"
  },
  "page/frame-hierarchy.spec.ts > should detach child frames on navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-convenience.spec.ts > should have a nice preview": {
    "previous": "passed",
    "current": "failed"
  },
  "page/locator-convenience.spec.ts > innerHTML should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-misc-1.spec.ts > should focus and blur a button": {
    "previous": "failed",
    "current": "passed"
  },
  "page/locator-query.spec.ts > should enforce same frame for has/leftOf/rightOf/above/below/near": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should work with locator.hover()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-locator-handler.spec.ts > should not work with force:true": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-locator-handler.spec.ts > should wait for hidden by default": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-script-tag.spec.ts > should work with a url and type=module": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-script-tag.spec.ts > should include sourceURL when path is provided": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-style-tag.spec.ts > should work with a url @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-add-style-tag.spec.ts > should work with content": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-add-style-tag.spec.ts > should throw when added with content to the CSP page": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-aria-snapshot-ai.spec.ts > should stitch all frame snapshots": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-aria-snapshot.spec.ts > should include pseudo codepoints": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-basic.spec.ts > should await cross-process navigation when clicking anchor": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-autowaiting-basic.spec.ts > should work with goto following click": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-autowaiting-no-hang.spec.ts > clicking in the middle of navigation that commits": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-basic.spec.ts > page.url should include hashes": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click-react.spec.ts > should not retarget when element is recycled on hover": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click-timeout-1.spec.ts > should avoid side effects after timeout": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click-timeout-4.spec.ts > should timeout waiting for stable position": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should select the text by triple clicking": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should waitFor visible when already visible": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should waitFor display:none to be gone": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click wrapped links": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click on checkbox input and toggle": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click on checkbox label and toggle": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should scroll and click the button": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click a partially obscured button": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should fire contextmenu event on right click": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should click the button inside an iframe": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should click a button in scrolling container with offset": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should wait for stable position": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > trial run should not double click": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-click.spec.ts > should update modifiers correctly": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-click.spec.ts > should fail when element detaches after animation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch click after a cross origin navigation ": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-dispatchevent.spec.ts > should dispatch drag drop events": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-evaluate.spec.ts > should work right after a cross-origin navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-evaluate.spec.ts > should work with new Function() and CSP": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-evaluate.spec.ts > should work with overridden globalThis.Window/Document/Node": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-network.spec.ts > Page.Events.Request @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-network.spec.ts > should fire events in proper order": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-network.spec.ts > should support redirects": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-event-popup.spec.ts > should work with clicking target=_blank": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-expose-function.spec.ts > should work on frames before navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should fill textarea @smoke": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should fill different input types": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - date": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-fill.spec.ts > input event.composed should be true and cross shadow dom boundary - time": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should retry on invisible element": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-fill.spec.ts > should not throw when fill causes navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should use http for no protocol": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-goto.spec.ts > should work when page calls history API in beforeunload": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-goto.spec.ts > should return url with basic auth info": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > page.goBack should work @smoke": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > goBack/goForward should work with bfcache-able pages": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > page.reload should work": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-history.spec.ts > page.goForward during renderer-initiated navigation": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-history.spec.ts > regression test for issue 20791": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-history.spec.ts > should reload proper page": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should move with the arrow keys": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should not type canceled events": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should press plus": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should handle selectAll": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should work with keyboard events with empty.html": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-keyboard.spec.ts > should scroll with PageDown": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-keyboard.spec.ts > should dispatch insertText after context menu was opened": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-navigation.spec.ts > should work with cross-process _blank target": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-response.spec.ts > should return text": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-response.spec.ts > should bypass disk cache when page interception is enabled": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-network-response.spec.ts > should bypass disk cache when context interception is enabled": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot > should take fullPage screenshots during navigation": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should resume infinite animations": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should fire transitionend for finite transitions": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-screenshot.spec.ts > page screenshot animations > should trigger particular events for css transitions": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-set-input-files.spec.ts > should throw when uploading a file in a directory upload input": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-set-input-files.spec.ts > should upload a file after popup": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-function.spec.ts > should not be called after finishing successfully": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-function.spec.ts > should not be called after finishing unsuccessfully": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-load-state.spec.ts > should resolve immediately if loaded": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-navigation.spec.ts > should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-navigation.spec.ts > should work with clicking on anchor links": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-request.spec.ts > should work": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-request.spec.ts > should work with no timeout": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-response.spec.ts > should work with re-rendered cached IMG elements": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > should resolve promise when node is added": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-selector-1.spec.ts > should report logs while waiting for hidden": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-selector-1.spec.ts > should resolve promise when node is added in shadow dom": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-url.spec.ts > should work with both domcontentloaded and load": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-url.spec.ts > should work with clicking on anchor links": {
    "previous": "passed",
    "current": "failed"
  },
  "page/page-wait-for-url.spec.ts > should work with DOM history.back()/history.forward()": {
    "previous": "failed",
    "current": "passed"
  },
  "page/page-wait-for-url.spec.ts > should work with url match for same document navigations": {
    "previous": "passed",
    "current": "failed"
  },
  "page/selectors-css.spec.ts > should work with :nth-child": {
    "previous": "passed",
    "current": "failed"
  },
  "page/selectors-misc.spec.ts > should work for open shadow roots": {
    "previous": "passed",
    "current": "failed"
  },
  "page/selectors-misc.spec.ts > should work with internal:has=": {
    "previous": "failed",
    "current": "passed"
  },
  "page/selectors-text.spec.ts > should work for open shadow roots": {
    "previous": "passed",
    "current": "failed"
  }
}